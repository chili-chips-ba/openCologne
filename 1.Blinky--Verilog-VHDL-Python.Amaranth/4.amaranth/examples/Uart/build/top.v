/* Automatically generated by Amaranth 0.6.0.dev13. Do not edit. */
/* Generated by Yosys 0.40+22 (git sha1 fa0c5c1d4, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

module top(uart_0__tx__io, led_0__io, clk0_0__io, uart_0__rx__io);
  wire clk;
  (* keep = "TRUE" *)
  wire clk0_0__i;
  input clk0_0__io;
  wire clk0_0__io;
  wire i_Rx_Serial;
  wire \i_Rx_Serial$5 ;
  output led_0__io;
  wire led_0__io;
  wire led_0__o;
  wire [7:0] o_Rx_Byte;
  wire [7:0] o_Rx_Byte1;
  wire o_Rx_DV;
  wire o_Rx_DV1;
  wire rst;
  wire uart_0__rx__i;
  input uart_0__rx__io;
  wire uart_0__rx__io;
  output uart_0__tx__io;
  wire uart_0__tx__io;
  \top.cd_sync  cd_sync (
    .clk(clk),
    .rst(rst)
  );
  \top.pin_clk0_0  pin_clk0_0 (
    .clk0_0__i(clk),
    .clk0_0__io(clk0_0__io)
  );
  \top.pin_led_0  pin_led_0 (
    .led_0__io(led_0__io),
    .o(o_Rx_Byte1[0])
  );
  \top.pin_uart_0__rx  pin_uart_0__rx (
    .uart_0__rx__i(i_Rx_Serial),
    .uart_0__rx__io(uart_0__rx__io)
  );
  \top.pin_uart_0__tx  pin_uart_0__tx (
    .uart_0__tx__io(uart_0__tx__io)
  );
  \top.uart_rx  uart_rx (
    .clk(clk),
    .i_Rx_Serial(i_Rx_Serial),
    .o_Rx_Byte(o_Rx_Byte1),
    .o_Rx_DV(o_Rx_DV1),
    .rst(rst)
  );
  assign \i_Rx_Serial$5  = i_Rx_Serial;
  assign o_Rx_DV = o_Rx_DV1;
  assign o_Rx_Byte = o_Rx_Byte1;
  assign uart_0__rx__i = i_Rx_Serial;
  assign led_0__o = o_Rx_Byte1[0];
  assign clk0_0__i = clk;
endmodule

module \top.cd_sync (rst, clk);
  (* keep = "TRUE" *)
  input clk;
  wire clk;
  (* keep = "TRUE" *)
  wire clk0_0__i;
  output rst;
  wire rst;
  \top.cd_sync.reset_sync  reset_sync (
    .async_ff_clk(clk),
    .stage1(rst)
  );
  assign clk0_0__i = clk;
endmodule

module \top.cd_sync.reset_sync (stage1, async_ff_clk);
  input async_ff_clk;
  wire async_ff_clk;
  wire async_ff_rst;
  wire clk;
  (* init = 1'h1 *)
  wire rst;
  reg stage0 = 1'h1;
  output stage1;
  reg stage1 = 1'h1;
  always @(posedge async_ff_clk)
    stage0 <= 1'h0;
  always @(posedge async_ff_clk)
    stage1 <= stage0;
  assign async_ff_rst = 1'h0;
  assign clk = async_ff_clk;
  assign rst = stage1;
endmodule

module \top.pin_clk0_0 (clk0_0__io, clk0_0__i);
  (* keep = "TRUE" *)
  output clk0_0__i;
  wire clk0_0__i;
  input clk0_0__io;
  wire clk0_0__io;
  (* keep = "TRUE" *)
  wire i;
  \top.pin_clk0_0.buf  \buf  (
    .clk0_0__io(clk0_0__io),
    .i(clk0_0__i)
  );
  assign i = clk0_0__i;
endmodule

module \top.pin_clk0_0.buf (clk0_0__io, i);
  input clk0_0__io;
  wire clk0_0__io;
  output i;
  wire i;
  assign i = clk0_0__io;
endmodule

module \top.pin_led_0 (led_0__io, o);
  output led_0__io;
  wire led_0__io;
  wire led_0__o;
  input o;
  wire o;
  \top.pin_led_0.buf  \buf  (
    .led_0__io(led_0__io),
    .o(o)
  );
  assign led_0__o = o;
endmodule

module \top.pin_led_0.buf (led_0__io, o);
  output led_0__io;
  wire led_0__io;
  input o;
  wire o;
  assign led_0__io = o;
endmodule

module \top.pin_uart_0__rx (uart_0__rx__io, uart_0__rx__i);
  wire i;
  output uart_0__rx__i;
  wire uart_0__rx__i;
  input uart_0__rx__io;
  wire uart_0__rx__io;
  \top.pin_uart_0__rx.buf  \buf  (
    .i(uart_0__rx__i),
    .uart_0__rx__io(uart_0__rx__io)
  );
  assign i = uart_0__rx__i;
endmodule

module \top.pin_uart_0__rx.buf (uart_0__rx__io, i);
  output i;
  wire i;
  input uart_0__rx__io;
  wire uart_0__rx__io;
  assign i = uart_0__rx__io;
endmodule

module \top.pin_uart_0__tx (uart_0__tx__io);
  wire o;
  output uart_0__tx__io;
  wire uart_0__tx__io;
  wire uart_0__tx__o;
  \top.pin_uart_0__tx.buf  \buf  (
    .uart_0__tx__io(uart_0__tx__io)
  );
  assign o = 1'h0;
  assign uart_0__tx__o = 1'h0;
endmodule

module \top.pin_uart_0__tx.buf (uart_0__tx__io);
  wire o;
  output uart_0__tx__io;
  wire uart_0__tx__io;
  assign o = 1'h0;
  assign uart_0__tx__io = 1'h0;
endmodule

module \top.uart_rx (clk, o_Rx_DV, o_Rx_Byte, rst, i_Rx_Serial);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [8:0] \$1 ;
  wire \$10 ;
  wire [3:0] \$11 ;
  wire \$12 ;
  wire [16:0] \$13 ;
  reg [7:0] \$14 ;
  reg \$15 ;
  reg \$16 ;
  reg \$17 ;
  reg \$18 ;
  reg \$19 ;
  wire \$2 ;
  reg [15:0] \$20 ;
  reg [2:0] \$21 ;
  reg [2:0] \$22 ;
  reg [7:0] \$23 ;
  reg [7:0] \$24 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire [16:0] \$7 ;
  wire \$8 ;
  wire [16:0] \$9 ;
  reg [7:0] UartClk = 8'h00;
  input clk;
  wire clk;
  input i_Rx_Serial;
  wire i_Rx_Serial;
  output [7:0] o_Rx_Byte;
  reg [7:0] o_Rx_Byte = 8'h00;
  output o_Rx_DV;
  reg o_Rx_DV = 1'h0;
  reg [2:0] r_Bit_Index = 3'h0;
  reg [15:0] r_Clock_Count = 16'h0000;
  reg [7:0] r_Rx_Byte = 8'h00;
  reg r_Rx_DV = 1'h0;
  reg r_Rx_DV_last = 1'h0;
  reg r_Rx_Data = 1'h1;
  reg r_Rx_Data_R = 1'h1;
  reg [2:0] r_SM_Main = 3'h0;
  input rst;
  wire rst;
  assign \$1  = UartClk + 1'h1;
  assign \$2  = ~ r_Rx_DV_last;
  assign \$3  = r_Rx_DV & \$2 ;
  assign \$4  = ! r_Rx_Data;
  assign \$5  = r_Clock_Count == 6'h2b;
  assign \$6  = ! r_Rx_Data;
  assign \$7  = r_Clock_Count + 1'h1;
  assign \$8  = r_Clock_Count < 7'h56;
  assign \$9  = r_Clock_Count + 1'h1;
  assign \$10  = r_Bit_Index < 3'h7;
  assign \$11  = r_Bit_Index + 1'h1;
  assign \$12  = r_Clock_Count < 7'h56;
  assign \$13  = r_Clock_Count + 1'h1;
  always @(posedge clk)
    UartClk <= \$14 ;
  always @(posedge clk)
    o_Rx_DV <= \$15 ;
  always @(posedge clk)
    r_Rx_DV_last <= \$16 ;
  always @(posedge clk)
    r_Rx_Data_R <= \$17 ;
  always @(posedge clk)
    r_Rx_Data <= \$18 ;
  always @(posedge clk)
    r_Rx_DV <= \$19 ;
  always @(posedge clk)
    r_Clock_Count <= \$20 ;
  always @(posedge clk)
    r_Bit_Index <= \$21 ;
  always @(posedge clk)
    r_SM_Main <= \$22 ;
  always @(posedge clk)
    r_Rx_Byte <= \$23 ;
  always @(posedge clk)
    o_Rx_Byte <= \$24 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$14  = \$1 [7:0];
    if (rst) begin
      \$14  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$15  = \$3 ;
    if (rst) begin
      \$15  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$16  = r_Rx_DV;
    if (rst) begin
      \$16  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$17  = i_Rx_Serial;
    if (rst) begin
      \$17  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$18  = r_Rx_Data_R;
    if (rst) begin
      \$18  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$19  = r_Rx_DV;
    casez (r_SM_Main)
      3'h0:
          \$19  = 1'h0;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            \$19  = 1'h1;
          end
      3'h4:
          \$19  = 1'h0;
    endcase
    if (rst) begin
      \$19  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$20  = r_Clock_Count;
    casez (r_SM_Main)
      3'h0:
          \$20  = 16'h0000;
      3'h1:
          (* full_case = 32'd1 *)
          if (\$5 ) begin
            if (\$6 ) begin
              \$20  = 16'h0000;
            end
          end else begin
            \$20  = \$7 [15:0];
          end
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
            \$20  = \$9 [15:0];
          end else begin
            \$20  = 16'h0000;
          end
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
            \$20  = \$13 [15:0];
          end else begin
            \$20  = 16'h0000;
          end
    endcase
    if (rst) begin
      \$20  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$21  = r_Bit_Index;
    casez (r_SM_Main)
      3'h0:
          \$21  = 3'h0;
      3'h1:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
              \$21  = \$11 [2:0];
            end else begin
              \$21  = 3'h0;
            end
          end
    endcase
    if (rst) begin
      \$21  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (r_SM_Main)
      3'h0:
          (* full_case = 32'd1 *)
          if (\$4 ) begin
            \$22  = 3'h1;
          end else begin
            \$22  = 3'h0;
          end
      3'h1:
          (* full_case = 32'd1 *)
          if (\$5 ) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
              \$22  = 3'h2;
            end else begin
              \$22  = 3'h0;
            end
          end else begin
            \$22  = 3'h1;
          end
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
            \$22  = 3'h2;
          end else begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
              \$22  = 3'h2;
            end else begin
              \$22  = 3'h3;
            end
          end
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
            \$22  = 3'h3;
          end else begin
            \$22  = 3'h4;
          end
      3'h4:
          \$22  = 3'h0;
      default:
          \$22  = 3'h0;
    endcase
    if (rst) begin
      \$22  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$23  = r_Rx_Byte;
    casez (r_SM_Main)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
          end else begin
            (* full_case = 32'd1 *)
            casez (r_Bit_Index)
              3'h0:
                  \$23 [0] = r_Rx_Data;
              3'h1:
                  \$23 [1] = r_Rx_Data;
              3'h2:
                  \$23 [2] = r_Rx_Data;
              3'h3:
                  \$23 [3] = r_Rx_Data;
              3'h4:
                  \$23 [4] = r_Rx_Data;
              3'h5:
                  \$23 [5] = r_Rx_Data;
              3'h6:
                  \$23 [6] = r_Rx_Data;
              3'h7:
                  \$23 [7] = r_Rx_Data;
            endcase
          end
    endcase
    if (rst) begin
      \$23  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$24  = o_Rx_Byte;
    casez (r_SM_Main)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            \$24  = r_Rx_Byte;
          end
    endcase
    if (rst) begin
      \$24  = 8'h00;
    end
  end
endmodule
