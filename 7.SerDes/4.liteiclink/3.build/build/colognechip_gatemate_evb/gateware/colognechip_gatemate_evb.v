// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : colognechip_gatemate_evb.v
// Device     : CCGM1A1
// LiteX sha1 : dd54d77db
// Date       : 2025-07-20 17:42:09
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module colognechip_gatemate_evb (
    input  wire          clk10,
    input  wire          usb_uart_rx,
    output reg           usb_uart_tx,
    input  wire          user_btn_n0,
    output wire          user_led_n0,
    output wire          user_led_n1,
    output wire          user_led_n2,
    output wire          user_led_n3,
    output wire          user_led_n4,
    output wire          user_led_n5,
    output wire          user_led_n6,
    output wire          user_led_n7
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GateMatePLL)
│    │    └─── [CC_PLL]
│    └─── [CC_USR_RSTN]
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── serdes (SerDesGM)
│    └─── encoder (Encoder)
│    │    └─── singleencoder_0* (SingleEncoder)
│    │    └─── singleencoder_1* (SingleEncoder)
│    └─── tx_prbs (PRBSTX)
│    │    └─── prbs7generator_0* (PRBS7Generator)
│    │    └─── prbs15generator_0* (PRBS15Generator)
│    │    └─── prbs31generator_0* (PRBS31Generator)
│    └─── rx_prbs (PRBSRX)
│    │    └─── prbs7checker_0* (PRBS7Checker)
│    │    │    └─── waittimer_0* (WaitTimer)
│    │    └─── prbs15checker_0* (PRBS15Checker)
│    │    │    └─── waittimer_0* (WaitTimer)
│    │    └─── prbs31checker_0* (PRBS31Checker)
│    │    │    └─── waittimer_0* (WaitTimer)
│    └─── [CC_BUFG]
│    └─── [CC_BUFG]
│    └─── [CC_BUFG]
│    └─── [CC_SERDES]
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstatus_2* (CSRStatus)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
└─── [CC_DFF]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg    [19:0] builder_count = 20'd1000000;
wire    [5:0] builder_csr_bankarray_adr;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg           builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
reg           builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg           builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg           builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg           builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg           builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          builder_csr_bankarray_csrbank0_sel;
wire    [7:0] builder_csr_bankarray_csrbank1_out0_r;
reg           builder_csr_bankarray_csrbank1_out0_re = 1'd0;
wire    [7:0] builder_csr_bankarray_csrbank1_out0_w;
reg           builder_csr_bankarray_csrbank1_out0_we = 1'd0;
wire          builder_csr_bankarray_csrbank1_sel;
wire          builder_csr_bankarray_csrbank2_rx_enable0_r;
reg           builder_csr_bankarray_csrbank2_rx_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_rx_enable0_w;
reg           builder_csr_bankarray_csrbank2_rx_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_rx_prbs_config0_r;
reg           builder_csr_bankarray_csrbank2_rx_prbs_config0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_rx_prbs_config0_w;
reg           builder_csr_bankarray_csrbank2_rx_prbs_config0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_rx_prbs_errors_r;
reg           builder_csr_bankarray_csrbank2_rx_prbs_errors_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank2_rx_prbs_errors_w;
reg           builder_csr_bankarray_csrbank2_rx_prbs_errors_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_rx_prbs_pause0_r;
reg           builder_csr_bankarray_csrbank2_rx_prbs_pause0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_rx_prbs_pause0_w;
reg           builder_csr_bankarray_csrbank2_rx_prbs_pause0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_rx_ready_r;
reg           builder_csr_bankarray_csrbank2_rx_ready_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_rx_ready_w;
reg           builder_csr_bankarray_csrbank2_rx_ready_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_sel;
wire          builder_csr_bankarray_csrbank2_tx_enable0_r;
reg           builder_csr_bankarray_csrbank2_tx_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_tx_enable0_w;
reg           builder_csr_bankarray_csrbank2_tx_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_tx_prbs_config0_r;
reg           builder_csr_bankarray_csrbank2_tx_prbs_config0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank2_tx_prbs_config0_w;
reg           builder_csr_bankarray_csrbank2_tx_prbs_config0_we = 1'd0;
wire          builder_csr_bankarray_csrbank2_tx_ready_r;
reg           builder_csr_bankarray_csrbank2_tx_ready_re = 1'd0;
wire          builder_csr_bankarray_csrbank2_tx_ready_w;
reg           builder_csr_bankarray_csrbank2_tx_ready_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_en0_r;
reg           builder_csr_bankarray_csrbank3_en0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_en0_w;
reg           builder_csr_bankarray_csrbank3_en0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_enable0_r;
reg           builder_csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_enable0_w;
reg           builder_csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_pending_r;
reg           builder_csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_pending_w;
reg           builder_csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_status_r;
reg           builder_csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_ev_status_w;
reg           builder_csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_load0_r;
reg           builder_csr_bankarray_csrbank3_load0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_load0_w;
reg           builder_csr_bankarray_csrbank3_load0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_reload0_r;
reg           builder_csr_bankarray_csrbank3_reload0_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_reload0_w;
reg           builder_csr_bankarray_csrbank3_reload0_we = 1'd0;
wire          builder_csr_bankarray_csrbank3_sel;
wire          builder_csr_bankarray_csrbank3_update_value0_r;
reg           builder_csr_bankarray_csrbank3_update_value0_re = 1'd0;
wire          builder_csr_bankarray_csrbank3_update_value0_w;
reg           builder_csr_bankarray_csrbank3_update_value0_we = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_value_r;
reg           builder_csr_bankarray_csrbank3_value_re = 1'd0;
wire   [31:0] builder_csr_bankarray_csrbank3_value_w;
reg           builder_csr_bankarray_csrbank3_value_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_enable0_r;
reg           builder_csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_enable0_w;
reg           builder_csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_pending_r;
reg           builder_csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_pending_w;
reg           builder_csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_status_r;
reg           builder_csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire    [1:0] builder_csr_bankarray_csrbank4_ev_status_w;
reg           builder_csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxempty_r;
reg           builder_csr_bankarray_csrbank4_rxempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxempty_w;
reg           builder_csr_bankarray_csrbank4_rxempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxfull_r;
reg           builder_csr_bankarray_csrbank4_rxfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_rxfull_w;
reg           builder_csr_bankarray_csrbank4_rxfull_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_sel;
wire          builder_csr_bankarray_csrbank4_txempty_r;
reg           builder_csr_bankarray_csrbank4_txempty_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_txempty_w;
reg           builder_csr_bankarray_csrbank4_txempty_we = 1'd0;
wire          builder_csr_bankarray_csrbank4_txfull_r;
reg           builder_csr_bankarray_csrbank4_txfull_re = 1'd0;
wire          builder_csr_bankarray_csrbank4_txfull_w;
reg           builder_csr_bankarray_csrbank4_txfull_we = 1'd0;
wire    [7:0] builder_csr_bankarray_dat_r;
wire   [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
wire          builder_csr_bankarray_interface0_bank_bus_re;
wire          builder_csr_bankarray_interface0_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
wire          builder_csr_bankarray_interface1_bank_bus_re;
wire          builder_csr_bankarray_interface1_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
wire          builder_csr_bankarray_interface2_bank_bus_re;
wire          builder_csr_bankarray_interface2_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
wire          builder_csr_bankarray_interface3_bank_bus_re;
wire          builder_csr_bankarray_interface3_bank_bus_we;
wire   [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
wire          builder_csr_bankarray_interface4_bank_bus_re;
wire          builder_csr_bankarray_interface4_bank_bus_we;
wire          builder_csr_bankarray_sel;
reg           builder_csr_bankarray_sel_r = 1'd0;
wire   [13:0] builder_csr_bankarray_sram_bus_adr;
reg    [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] builder_csr_bankarray_sram_bus_dat_w;
wire          builder_csr_bankarray_sram_bus_re;
wire          builder_csr_bankarray_sram_bus_we;
wire   [13:0] builder_csr_interconnect_adr;
wire   [31:0] builder_csr_interconnect_dat_r;
wire   [31:0] builder_csr_interconnect_dat_w;
wire          builder_csr_interconnect_re;
wire          builder_csr_interconnect_we;
wire          builder_done;
reg           builder_error = 1'd0;
reg     [5:0] builder_f_self0 = 6'd0;
reg           builder_f_self1 = 1'd0;
reg           builder_f_self2 = 1'd0;
reg           builder_f_self3 = 1'd0;
reg     [5:0] builder_f_self4 = 6'd0;
reg           builder_f_self5 = 1'd0;
reg           builder_f_self6 = 1'd0;
reg           builder_f_self7 = 1'd0;
wire          builder_gatematepll0;
wire          builder_gatematepll1;
wire          builder_gatematepll2;
reg           builder_gatematepll3 = 1'd0;
wire          builder_gatematepll4;
wire          builder_gatematepll5;
wire          builder_gatematepll_locked_s1;
reg           builder_grant = 1'd0;
reg           builder_interface0_ack = 1'd0;
wire   [29:0] builder_interface0_adr;
wire    [1:0] builder_interface0_bte;
wire    [2:0] builder_interface0_cti;
wire          builder_interface0_cyc;
reg    [31:0] builder_interface0_dat_r = 32'd0;
wire   [31:0] builder_interface0_dat_w;
reg           builder_interface0_err = 1'd0;
wire    [3:0] builder_interface0_sel;
wire          builder_interface0_stb;
wire          builder_interface0_we;
reg    [13:0] builder_interface1_adr = 14'd0;
wire   [31:0] builder_interface1_dat_r;
reg    [31:0] builder_interface1_dat_w = 32'd0;
reg           builder_interface1_re = 1'd0;
reg           builder_interface1_we = 1'd0;
reg     [2:0] builder_master = 3'd0;
reg           builder_multiregimpl0_regs0 = 1'd0;
reg           builder_multiregimpl0_regs1 = 1'd0;
reg     [1:0] builder_multiregimpl1_regs0 = 2'd0;
reg     [1:0] builder_multiregimpl1_regs1 = 2'd0;
reg     [1:0] builder_multiregimpl2_regs0 = 2'd0;
reg     [1:0] builder_multiregimpl2_regs1 = 2'd0;
reg     [1:0] builder_multiregimpl3_regs0 = 2'd0;
reg     [1:0] builder_multiregimpl3_regs1 = 2'd0;
reg     [1:0] builder_multiregimpl4_regs0 = 2'd0;
reg     [1:0] builder_multiregimpl4_regs1 = 2'd0;
reg           builder_multiregimpl5_regs0 = 1'd0;
reg           builder_multiregimpl5_regs1 = 1'd0;
reg    [31:0] builder_multiregimpl6_regs0 = 32'd0;
reg    [31:0] builder_multiregimpl6_regs1 = 32'd0;
reg           builder_next_state = 1'd0;
wire    [1:0] builder_request;
reg     [3:0] builder_rhs_self0 = 4'd0;
reg           builder_rhs_self1 = 1'd0;
reg     [3:0] builder_rhs_self2 = 4'd0;
reg           builder_rhs_self3 = 1'd0;
reg           builder_rs232phyrx_next_state = 1'd0;
reg           builder_rs232phyrx_state = 1'd0;
reg           builder_rs232phytx_next_state = 1'd0;
reg           builder_rs232phytx_state = 1'd0;
wire          builder_rst10;
wire          builder_rst11;
wire          builder_rst12;
reg    [29:0] builder_self0 = 30'd0;
reg    [31:0] builder_self1 = 32'd0;
reg     [3:0] builder_self2 = 4'd0;
reg           builder_self3 = 1'd0;
reg           builder_self4 = 1'd0;
reg           builder_self5 = 1'd0;
reg     [2:0] builder_self6 = 3'd0;
reg     [1:0] builder_self7 = 2'd0;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [2:0] builder_slaves = 3'd0;
reg           builder_state = 1'd0;
wire          builder_wait;
reg           main_adpll_reset = 1'd1;
wire   [14:0] main_basesoc_basesoc_adr;
reg           main_basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] main_basesoc_basesoc_dat_r;
reg           main_basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_basesoc_ram_bus_adr;
wire    [1:0] main_basesoc_basesoc_ram_bus_bte;
wire    [2:0] main_basesoc_basesoc_ram_bus_cti;
wire          main_basesoc_basesoc_ram_bus_cyc;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_w;
reg           main_basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_basesoc_ram_bus_sel;
wire          main_basesoc_basesoc_ram_bus_stb;
wire          main_basesoc_basesoc_ram_bus_we;
wire          main_basesoc_bus_error;
reg    [31:0] main_basesoc_bus_errors = 32'd0;
reg           main_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_bus_errors_status;
wire          main_basesoc_bus_errors_we;
wire          main_basesoc_cpu_rst;
wire          main_basesoc_dbus_ack;
wire   [29:0] main_basesoc_dbus_adr;
wire    [1:0] main_basesoc_dbus_bte;
wire    [2:0] main_basesoc_dbus_cti;
wire          main_basesoc_dbus_cyc;
wire   [31:0] main_basesoc_dbus_dat_r;
wire   [31:0] main_basesoc_dbus_dat_w;
wire          main_basesoc_dbus_err;
wire    [3:0] main_basesoc_dbus_sel;
wire          main_basesoc_dbus_stb;
wire          main_basesoc_dbus_we;
wire          main_basesoc_ibus_ack;
wire   [29:0] main_basesoc_ibus_adr;
wire    [1:0] main_basesoc_ibus_bte;
wire    [2:0] main_basesoc_ibus_cti;
wire          main_basesoc_ibus_cyc;
wire   [31:0] main_basesoc_ibus_dat_r;
wire   [31:0] main_basesoc_ibus_dat_w;
wire          main_basesoc_ibus_err;
wire    [3:0] main_basesoc_ibus_sel;
wire          main_basesoc_ibus_stb;
wire          main_basesoc_ibus_we;
reg    [31:0] main_basesoc_interrupt = 32'd0;
wire   [10:0] main_basesoc_ram_adr;
reg           main_basesoc_ram_adr_burst = 1'd0;
reg           main_basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_ram_bus_ram_bus_adr;
wire    [1:0] main_basesoc_ram_bus_ram_bus_bte;
wire    [2:0] main_basesoc_ram_bus_ram_bus_cti;
wire          main_basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_w;
reg           main_basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_ram_bus_ram_bus_sel;
wire          main_basesoc_ram_bus_ram_bus_stb;
wire          main_basesoc_ram_bus_ram_bus_we;
wire   [31:0] main_basesoc_ram_dat_r;
wire   [31:0] main_basesoc_ram_dat_w;
reg     [3:0] main_basesoc_ram_we = 4'd0;
wire          main_basesoc_reset;
reg           main_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_rx_source_ready;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_soc_rst = 1'd0;
reg           main_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_timer_irq;
reg           main_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_timer_pending_re = 1'd0;
wire          main_basesoc_timer_pending_status;
wire          main_basesoc_timer_pending_we;
reg           main_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_timer_status_re = 1'd0;
wire          main_basesoc_timer_status_status;
wire          main_basesoc_timer_status_we;
reg           main_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_timer_value = 32'd0;
reg           main_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_timer_value_we;
wire          main_basesoc_timer_zero0;
wire          main_basesoc_timer_zero1;
wire          main_basesoc_timer_zero2;
reg           main_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_timer_zero_status;
wire          main_basesoc_timer_zero_trigger;
reg           main_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_first;
wire          main_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_tx_sink_payload_data;
reg           main_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_tx_sink_valid;
reg           main_basesoc_tx_tick = 1'd0;
reg           main_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_uart_irq;
reg     [1:0] main_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_uart_pending_we;
wire          main_basesoc_uart_rx0;
wire          main_basesoc_uart_rx1;
wire          main_basesoc_uart_rx2;
reg           main_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_uart_rx_fifo_re;
reg           main_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_uart_rx_status;
wire          main_basesoc_uart_rx_trigger;
reg           main_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_uart_rxempty_status;
wire          main_basesoc_uart_rxempty_we;
reg           main_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_uart_rxfull_status;
wire          main_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_uart_rxtx_r;
reg           main_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_uart_rxtx_w;
reg           main_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_uart_status_we;
wire          main_basesoc_uart_tx0;
wire          main_basesoc_uart_tx1;
wire          main_basesoc_uart_tx2;
reg           main_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_uart_tx_fifo_re;
reg           main_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_uart_tx_status;
wire          main_basesoc_uart_tx_trigger;
reg           main_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_uart_txempty_status;
wire          main_basesoc_uart_txempty_we;
reg           main_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_uart_txfull_status;
wire          main_basesoc_uart_txfull_we;
wire          main_basesoc_uart_uart_sink_first;
wire          main_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_uart_uart_sink_ready;
wire          main_basesoc_uart_uart_sink_valid;
wire          main_basesoc_uart_uart_source_first;
wire          main_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_uart_uart_source_ready;
wire          main_basesoc_uart_uart_source_valid;
reg           main_basesoc_usb_uart_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 = 1'd0;
reg    [31:0] main_basesoc_vexriscv = 32'd0;
reg    [10:0] main_cdr_lock_counter = 11'd0;
reg           main_cdr_locked = 1'd0;
reg           main_ce0 = 1'd1;
wire          main_ce1;
wire          main_ce2;
reg     [7:0] main_chaser = 8'd0;
reg    [21:0] main_count = 22'd3125000;
wire          main_crg_clkin;
wire          main_crg_clkout;
wire          main_crg_locked;
wire          main_crg_reset;
wire          main_crg_rst_n;
reg     [7:0] main_d0 = 8'd0;
reg     [7:0] main_d1 = 8'd0;
reg           main_disparity0 = 1'd0;
reg           main_disparity1 = 1'd0;
wire          main_done;
wire          main_enable0;
wire          main_enable1;
reg     [9:0] main_input0 = 10'd0;
reg     [9:0] main_input1 = 10'd0;
reg           main_k0 = 1'd0;
reg           main_k1 = 1'd0;
reg     [7:0] main_leds = 8'd0;
reg           main_mode = 1'd0;
reg     [9:0] main_output0 = 10'd0;
reg     [9:0] main_output1 = 10'd0;
wire   [31:0] main_prbs_errors;
wire    [1:0] main_prbsrx_config0;
wire    [1:0] main_prbsrx_config1;
reg    [31:0] main_prbsrx_errors = 32'd0;
wire   [19:0] main_prbsrx_i;
wire   [19:0] main_prbsrx_new_prbs_data;
wire          main_prbsrx_pause;
reg    [10:0] main_prbsrx_prbs15_count = 11'd1024;
wire          main_prbsrx_prbs15_done;
reg    [19:0] main_prbsrx_prbs15_errors = 20'd0;
wire   [19:0] main_prbsrx_prbs15_i;
reg    [19:0] main_prbsrx_prbs15_i_last = 20'd0;
reg    [14:0] main_prbsrx_prbs15_n_in = 15'd1;
wire          main_prbsrx_prbs15_wait;
reg    [10:0] main_prbsrx_prbs31_count = 11'd1024;
wire          main_prbsrx_prbs31_done;
reg    [19:0] main_prbsrx_prbs31_errors = 20'd0;
wire   [19:0] main_prbsrx_prbs31_i;
reg    [19:0] main_prbsrx_prbs31_i_last = 20'd0;
reg    [30:0] main_prbsrx_prbs31_n_in = 31'd1;
wire          main_prbsrx_prbs31_wait;
reg    [10:0] main_prbsrx_prbs7_count = 11'd1024;
wire          main_prbsrx_prbs7_done;
reg    [19:0] main_prbsrx_prbs7_errors = 20'd0;
wire   [19:0] main_prbsrx_prbs7_i;
reg    [19:0] main_prbsrx_prbs7_i_last = 20'd0;
reg     [6:0] main_prbsrx_prbs7_n_in = 7'd1;
wire          main_prbsrx_prbs7_wait;
wire    [1:0] main_prbstx_config0;
wire    [1:0] main_prbstx_config1;
wire   [19:0] main_prbstx_i;
wire   [19:0] main_prbstx_new_prbs_data;
reg    [19:0] main_prbstx_o = 20'd0;
reg    [14:0] main_prbstx_prbs15_n_out = 15'd1;
reg    [19:0] main_prbstx_prbs15_o = 20'd0;
reg    [30:0] main_prbstx_prbs31_n_out = 31'd1;
reg    [19:0] main_prbstx_prbs31_o = 20'd0;
reg     [6:0] main_prbstx_prbs7_n_out = 7'd1;
reg    [19:0] main_prbstx_prbs7_o = 20'd0;
reg    [19:0] main_prbstx_prbs_data = 20'd0;
reg           main_re = 1'd0;
wire          main_ready0;
wire          main_ready1;
reg    [10:0] main_reset_counter = 11'd0;
wire   [23:0] main_rx_bus;
reg    [19:0] main_rx_data = 20'd0;
wire          main_rx_enable;
reg           main_rx_enable_re = 1'd0;
reg           main_rx_enable_storage = 1'd1;
wire    [1:0] main_rx_prbs_config0;
wire    [1:0] main_rx_prbs_config1;
reg           main_rx_prbs_config_re = 1'd0;
reg     [1:0] main_rx_prbs_config_storage = 2'd0;
wire   [31:0] main_rx_prbs_errors;
reg           main_rx_prbs_errors_re = 1'd0;
wire   [31:0] main_rx_prbs_errors_status;
wire          main_rx_prbs_errors_we;
wire          main_rx_prbs_pause0;
wire          main_rx_prbs_pause1;
reg           main_rx_prbs_pause_re = 1'd0;
reg           main_rx_prbs_pause_storage = 1'd0;
wire          main_rx_ready;
reg           main_rx_ready_re = 1'd0;
wire          main_rx_ready_status;
wire          main_rx_ready_we;
wire          main_rx_reset;
wire          main_rx_reset_done;
wire          main_rxoutclk;
reg           main_singleencoder0_alt7_rd0 = 1'd0;
reg           main_singleencoder0_alt7_rd1 = 1'd0;
reg     [3:0] main_singleencoder0_code4b = 4'd0;
reg           main_singleencoder0_code4b_flip = 1'd0;
reg           main_singleencoder0_code4b_unbalanced = 1'd0;
reg     [5:0] main_singleencoder0_code6b = 6'd0;
reg           main_singleencoder0_code6b_flip = 1'd0;
reg           main_singleencoder0_code6b_unbalanced = 1'd0;
wire    [7:0] main_singleencoder0_d;
reg           main_singleencoder0_disp_in = 1'd0;
wire          main_singleencoder0_disp_inter;
reg           main_singleencoder0_disp_out = 1'd0;
wire          main_singleencoder0_k;
reg     [9:0] main_singleencoder0_output = 10'd0;
reg     [3:0] main_singleencoder0_output_4b = 4'd0;
reg     [5:0] main_singleencoder0_output_6b = 6'd0;
wire    [9:0] main_singleencoder0_output_msb_first;
reg           main_singleencoder1_alt7_rd0 = 1'd0;
reg           main_singleencoder1_alt7_rd1 = 1'd0;
reg     [3:0] main_singleencoder1_code4b = 4'd0;
reg           main_singleencoder1_code4b_flip = 1'd0;
reg           main_singleencoder1_code4b_unbalanced = 1'd0;
reg     [5:0] main_singleencoder1_code6b = 6'd0;
reg           main_singleencoder1_code6b_flip = 1'd0;
reg           main_singleencoder1_code6b_unbalanced = 1'd0;
wire    [7:0] main_singleencoder1_d;
wire          main_singleencoder1_disp_in;
wire          main_singleencoder1_disp_inter;
reg           main_singleencoder1_disp_out = 1'd0;
wire          main_singleencoder1_k;
reg     [9:0] main_singleencoder1_output = 10'd0;
reg     [3:0] main_singleencoder1_output_4b = 4'd0;
reg     [5:0] main_singleencoder1_output_6b = 6'd0;
wire    [9:0] main_singleencoder1_output_msb_first;
reg     [7:0] main_storage = 8'd0;
reg    [23:0] main_tx_bus = 24'd0;
reg    [19:0] main_tx_data = 20'd0;
wire          main_tx_enable;
reg           main_tx_enable_re = 1'd0;
reg           main_tx_enable_storage = 1'd1;
wire          main_tx_half_clk;
reg           main_tx_half_toggle = 1'd0;
wire    [1:0] main_tx_prbs_config0;
wire    [1:0] main_tx_prbs_config1;
reg           main_tx_prbs_config_re = 1'd0;
reg     [1:0] main_tx_prbs_config_storage = 2'd0;
wire          main_tx_ready;
reg           main_tx_ready_re = 1'd0;
wire          main_tx_ready_status;
wire          main_tx_ready_we;
wire          main_tx_reset;
wire          main_tx_reset_done;
wire          main_txoutclk;
wire          main_wait;
wire          rx_clk;
wire          rx_rst;
wire          sys_clk;
wire          sys_rst;
wire          tx_clk;
wire          tx_half_clk;
wire          tx_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
assign main_basesoc_bus_error = builder_error;
always @(*) begin
    main_basesoc_interrupt <= 32'd0;
    main_basesoc_interrupt[1] <= main_basesoc_timer_irq;
    main_basesoc_interrupt[0] <= main_basesoc_uart_irq;
end
assign main_crg_reset = ((~main_crg_rst_n) | (~user_btn_n0));
assign main_crg_clkin = clk10;
assign sys_clk = main_crg_clkout;
assign main_crg_locked = (builder_gatematepll_locked_s1 & (~main_crg_reset));
assign builder_shared_adr = builder_self0;
assign builder_shared_dat_w = builder_self1;
assign builder_shared_sel = builder_self2;
assign builder_shared_cyc = builder_self3;
assign builder_shared_stb = builder_self4;
assign builder_shared_we = builder_self5;
assign builder_shared_cti = builder_self6;
assign builder_shared_bte = builder_self7;
assign main_basesoc_ibus_dat_r = builder_shared_dat_r;
assign main_basesoc_dbus_dat_r = builder_shared_dat_r;
assign main_basesoc_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_basesoc_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_basesoc_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_basesoc_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_basesoc_dbus_cyc, main_basesoc_ibus_cyc};
always @(*) begin
    builder_master <= 3'd0;
    builder_master[0] <= (builder_shared_adr[29:15] == 1'd0);
    builder_master[1] <= (builder_shared_adr[29:11] == 16'd32768);
    builder_master[2] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_basesoc_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_basesoc_ram_bus_bte = builder_shared_bte;
assign main_basesoc_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_basesoc_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_basesoc_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_basesoc_ram_bus_ram_bus_we = builder_shared_we;
assign main_basesoc_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_basesoc_ram_bus_ram_bus_bte = builder_shared_bte;
assign builder_interface0_adr = builder_shared_adr;
assign builder_interface0_dat_w = builder_shared_dat_w;
assign builder_interface0_sel = builder_shared_sel;
assign builder_interface0_stb = builder_shared_stb;
assign builder_interface0_we = builder_shared_we;
assign builder_interface0_cti = builder_shared_cti;
assign builder_interface0_bte = builder_shared_bte;
assign main_basesoc_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_master[0]);
assign main_basesoc_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_master[1]);
assign builder_interface0_cyc = (builder_shared_cyc & builder_master[2]);
assign builder_shared_err = ((main_basesoc_basesoc_ram_bus_err | main_basesoc_ram_bus_ram_bus_err) | builder_interface0_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= ((main_basesoc_basesoc_ram_bus_ack | main_basesoc_ram_bus_ram_bus_ack) | builder_interface0_ack);
    builder_shared_dat_r <= ((({32{builder_slaves[0]}} & main_basesoc_basesoc_ram_bus_dat_r) | ({32{builder_slaves[1]}} & main_basesoc_ram_bus_ram_bus_dat_r)) | ({32{builder_slaves[2]}} & builder_interface0_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
assign main_basesoc_basesoc_adr = main_basesoc_basesoc_ram_bus_adr[14:0];
assign main_basesoc_basesoc_ram_bus_dat_r = main_basesoc_basesoc_dat_r;
always @(*) begin
    main_basesoc_ram_we <= 4'd0;
    main_basesoc_ram_we[0] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[0]);
    main_basesoc_ram_we[1] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[1]);
    main_basesoc_ram_we[2] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[2]);
    main_basesoc_ram_we[3] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[3]);
end
assign main_basesoc_ram_adr = main_basesoc_ram_bus_ram_bus_adr[10:0];
assign main_basesoc_ram_bus_ram_bus_dat_r = main_basesoc_ram_dat_r;
assign main_basesoc_ram_dat_w = main_basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    builder_rs232phytx_next_state <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd0;
    builder_rs232phytx_next_state <= builder_rs232phytx_state;
    case (builder_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= main_basesoc_tx_data;
                main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_usb_uart_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
    case (builder_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
        main_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
        main_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
        main_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign main_wait = (~main_done);
always @(*) begin
    main_leds <= 8'd0;
    if ((main_mode == 1'd1)) begin
        main_leds <= main_storage;
    end else begin
        main_leds <= main_chaser;
    end
end
assign {user_led_n7, user_led_n6, user_led_n5, user_led_n4, user_led_n3, user_led_n2, user_led_n1, user_led_n0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
assign main_rx_prbs_errors = main_prbs_errors;
assign main_tx_half_clk = main_tx_half_toggle;
assign main_tx_reset = ((~main_tx_enable) | main_adpll_reset);
assign main_rx_reset = (~main_rx_enable);
assign main_prbstx_config0 = main_tx_prbs_config1;
assign main_prbsrx_config0 = main_rx_prbs_config1;
assign main_prbsrx_pause = main_rx_prbs_pause1;
assign main_prbstx_i = {main_output1, main_output0};
always @(*) begin
    main_tx_data <= 20'd0;
    if ((main_tx_prbs_config0 != 1'd0)) begin
        main_tx_data <= main_prbstx_o;
    end else begin
        main_tx_data <= {main_output1, main_output0};
    end
end
always @(*) begin
    main_tx_bus <= 24'd0;
    main_tx_bus[7:0] <= main_tx_data[7:0];
    main_tx_bus[8] <= 1'd0;
    main_tx_bus[9] <= 1'd0;
    main_tx_bus[17:10] <= main_tx_data[17:10];
    main_tx_bus[23:18] <= 1'd0;
end
always @(*) begin
    main_rx_data <= 20'd0;
    main_rx_data[7:0] <= main_rx_bus[7:0];
    main_rx_data[8] <= main_rx_bus[8];
    main_rx_data[9] <= main_rx_bus[9];
    main_rx_data[17:10] <= main_rx_bus[17:10];
    main_rx_data[18] <= main_rx_bus[18];
    main_rx_data[19] <= main_rx_bus[19];
end
assign main_prbsrx_i = main_rx_data;
assign main_rx_ready = main_cdr_locked;
assign main_tx_ready = (main_tx_reset_done & main_cdr_locked);
assign main_tx_enable = main_enable0;
assign main_rx_enable = main_enable1;
assign main_ready0 = main_tx_ready;
assign main_ready1 = main_rx_ready;
assign main_tx_prbs_config0 = main_tx_prbs_config_storage;
assign main_rx_prbs_config0 = main_rx_prbs_config_storage;
assign main_rx_prbs_pause0 = main_rx_prbs_pause_storage;
assign main_rx_prbs_errors_status = main_rx_prbs_errors;
assign main_ce1 = main_ce0;
assign main_ce2 = main_ce0;
assign main_singleencoder1_disp_in = main_singleencoder0_disp_out;
assign main_singleencoder0_d = main_d0;
assign main_singleencoder0_k = main_k0;
assign main_singleencoder1_d = main_d1;
assign main_singleencoder1_k = main_k1;
assign main_singleencoder0_disp_inter = (main_singleencoder0_disp_in ^ main_singleencoder0_code6b_unbalanced);
always @(*) begin
    main_singleencoder0_output_6b <= 6'd0;
    if (((~main_singleencoder0_disp_in) & main_singleencoder0_code6b_flip)) begin
        main_singleencoder0_output_6b <= (~main_singleencoder0_code6b);
    end else begin
        main_singleencoder0_output_6b <= main_singleencoder0_code6b;
    end
end
always @(*) begin
    main_singleencoder0_disp_out <= 1'd0;
    main_singleencoder0_output_4b <= 4'd0;
    if (((~main_singleencoder0_disp_inter) & main_singleencoder0_alt7_rd0)) begin
        main_singleencoder0_disp_out <= (~main_singleencoder0_disp_inter);
        main_singleencoder0_output_4b <= 3'd7;
    end else begin
        if ((main_singleencoder0_disp_inter & main_singleencoder0_alt7_rd1)) begin
            main_singleencoder0_disp_out <= (~main_singleencoder0_disp_inter);
            main_singleencoder0_output_4b <= 4'd8;
        end else begin
            main_singleencoder0_disp_out <= (main_singleencoder0_disp_inter ^ main_singleencoder0_code4b_unbalanced);
            if (((~main_singleencoder0_disp_inter) & main_singleencoder0_code4b_flip)) begin
                main_singleencoder0_output_4b <= (~main_singleencoder0_code4b);
            end else begin
                main_singleencoder0_output_4b <= main_singleencoder0_code4b;
            end
        end
    end
end
assign main_singleencoder0_output_msb_first = {main_singleencoder0_output_6b, main_singleencoder0_output_4b};
always @(*) begin
    main_singleencoder0_output <= 10'd0;
    main_singleencoder0_output[0] <= main_singleencoder0_output_msb_first[9];
    main_singleencoder0_output[1] <= main_singleencoder0_output_msb_first[8];
    main_singleencoder0_output[2] <= main_singleencoder0_output_msb_first[7];
    main_singleencoder0_output[3] <= main_singleencoder0_output_msb_first[6];
    main_singleencoder0_output[4] <= main_singleencoder0_output_msb_first[5];
    main_singleencoder0_output[5] <= main_singleencoder0_output_msb_first[4];
    main_singleencoder0_output[6] <= main_singleencoder0_output_msb_first[3];
    main_singleencoder0_output[7] <= main_singleencoder0_output_msb_first[2];
    main_singleencoder0_output[8] <= main_singleencoder0_output_msb_first[1];
    main_singleencoder0_output[9] <= main_singleencoder0_output_msb_first[0];
end
assign main_singleencoder1_disp_inter = (main_singleencoder1_disp_in ^ main_singleencoder1_code6b_unbalanced);
always @(*) begin
    main_singleencoder1_output_6b <= 6'd0;
    if (((~main_singleencoder1_disp_in) & main_singleencoder1_code6b_flip)) begin
        main_singleencoder1_output_6b <= (~main_singleencoder1_code6b);
    end else begin
        main_singleencoder1_output_6b <= main_singleencoder1_code6b;
    end
end
always @(*) begin
    main_singleencoder1_disp_out <= 1'd0;
    main_singleencoder1_output_4b <= 4'd0;
    if (((~main_singleencoder1_disp_inter) & main_singleencoder1_alt7_rd0)) begin
        main_singleencoder1_disp_out <= (~main_singleencoder1_disp_inter);
        main_singleencoder1_output_4b <= 3'd7;
    end else begin
        if ((main_singleencoder1_disp_inter & main_singleencoder1_alt7_rd1)) begin
            main_singleencoder1_disp_out <= (~main_singleencoder1_disp_inter);
            main_singleencoder1_output_4b <= 4'd8;
        end else begin
            main_singleencoder1_disp_out <= (main_singleencoder1_disp_inter ^ main_singleencoder1_code4b_unbalanced);
            if (((~main_singleencoder1_disp_inter) & main_singleencoder1_code4b_flip)) begin
                main_singleencoder1_output_4b <= (~main_singleencoder1_code4b);
            end else begin
                main_singleencoder1_output_4b <= main_singleencoder1_code4b;
            end
        end
    end
end
assign main_singleencoder1_output_msb_first = {main_singleencoder1_output_6b, main_singleencoder1_output_4b};
always @(*) begin
    main_singleencoder1_output <= 10'd0;
    main_singleencoder1_output[0] <= main_singleencoder1_output_msb_first[9];
    main_singleencoder1_output[1] <= main_singleencoder1_output_msb_first[8];
    main_singleencoder1_output[2] <= main_singleencoder1_output_msb_first[7];
    main_singleencoder1_output[3] <= main_singleencoder1_output_msb_first[6];
    main_singleencoder1_output[4] <= main_singleencoder1_output_msb_first[5];
    main_singleencoder1_output[5] <= main_singleencoder1_output_msb_first[4];
    main_singleencoder1_output[6] <= main_singleencoder1_output_msb_first[3];
    main_singleencoder1_output[7] <= main_singleencoder1_output_msb_first[2];
    main_singleencoder1_output[8] <= main_singleencoder1_output_msb_first[1];
    main_singleencoder1_output[9] <= main_singleencoder1_output_msb_first[0];
end
always @(*) begin
    main_prbstx_prbs_data <= 20'd0;
    case (main_prbstx_config0)
        1'd0: begin
            main_prbstx_prbs_data <= 1'd0;
        end
        1'd1: begin
            main_prbstx_prbs_data <= main_prbstx_prbs7_o;
        end
        2'd2: begin
            main_prbstx_prbs_data <= main_prbstx_prbs15_o;
        end
        2'd3: begin
            main_prbstx_prbs_data <= main_prbstx_prbs31_o;
        end
    endcase
end
assign main_prbstx_new_prbs_data = {main_prbstx_prbs_data[0], main_prbstx_prbs_data[1], main_prbstx_prbs_data[2], main_prbstx_prbs_data[3], main_prbstx_prbs_data[4], main_prbstx_prbs_data[5], main_prbstx_prbs_data[6], main_prbstx_prbs_data[7], main_prbstx_prbs_data[8], main_prbstx_prbs_data[9], main_prbstx_prbs_data[10], main_prbstx_prbs_data[11], main_prbstx_prbs_data[12], main_prbstx_prbs_data[13], main_prbstx_prbs_data[14], main_prbstx_prbs_data[15], main_prbstx_prbs_data[16], main_prbstx_prbs_data[17], main_prbstx_prbs_data[18], main_prbstx_prbs_data[19]};
always @(*) begin
    main_prbstx_o <= 20'd0;
    main_prbstx_o <= main_prbstx_i;
    if ((main_prbstx_config1 != 1'd0)) begin
        main_prbstx_o <= main_prbstx_new_prbs_data;
    end
end
assign main_prbsrx_new_prbs_data = {main_prbsrx_i[0], main_prbsrx_i[1], main_prbsrx_i[2], main_prbsrx_i[3], main_prbsrx_i[4], main_prbsrx_i[5], main_prbsrx_i[6], main_prbsrx_i[7], main_prbsrx_i[8], main_prbsrx_i[9], main_prbsrx_i[10], main_prbsrx_i[11], main_prbsrx_i[12], main_prbsrx_i[13], main_prbsrx_i[14], main_prbsrx_i[15], main_prbsrx_i[16], main_prbsrx_i[17], main_prbsrx_i[18], main_prbsrx_i[19]};
assign main_prbsrx_prbs7_i = main_prbsrx_new_prbs_data;
assign main_prbsrx_prbs15_i = main_prbsrx_new_prbs_data;
assign main_prbsrx_prbs31_i = main_prbsrx_new_prbs_data;
assign main_prbsrx_prbs7_wait = (main_prbsrx_prbs7_i == main_prbsrx_prbs7_i_last);
assign main_prbsrx_prbs7_done = (main_prbsrx_prbs7_count == 1'd0);
assign main_prbsrx_prbs15_wait = (main_prbsrx_prbs15_i == main_prbsrx_prbs15_i_last);
assign main_prbsrx_prbs15_done = (main_prbsrx_prbs15_count == 1'd0);
assign main_prbsrx_prbs31_wait = (main_prbsrx_prbs31_i == main_prbsrx_prbs31_i_last);
assign main_prbsrx_prbs31_done = (main_prbsrx_prbs31_count == 1'd0);
always @(*) begin
    builder_interface0_ack <= 1'd0;
    builder_interface0_dat_r <= 32'd0;
    builder_interface1_adr <= 14'd0;
    builder_interface1_dat_w <= 32'd0;
    builder_interface1_re <= 1'd0;
    builder_interface1_we <= 1'd0;
    builder_next_state <= 1'd0;
    builder_next_state <= builder_state;
    case (builder_state)
        1'd1: begin
            builder_interface0_ack <= 1'd1;
            builder_interface0_dat_r <= builder_interface1_dat_r;
            builder_next_state <= 1'd0;
        end
        default: begin
            builder_interface1_dat_w <= builder_interface0_dat_w;
            if ((builder_interface0_cyc & builder_interface0_stb)) begin
                builder_interface1_adr <= builder_interface0_adr;
                builder_interface1_re <= ((~builder_interface0_we) & (builder_interface0_sel != 1'd0));
                builder_interface1_we <= (builder_interface0_we & (builder_interface0_sel != 1'd0));
                builder_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_reset0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_scratch0_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
        builder_csr_bankarray_csrbank0_bus_errors_we <= builder_csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_reset_re) begin
        main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
    end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_reset_storage;
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_scratch_storage;
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_bus_errors_status;
assign main_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (builder_csr_bankarray_sel_r) begin
        builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
    end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_out0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[7:0];
always @(*) begin
    builder_csr_bankarray_csrbank1_out0_re <= 1'd0;
    builder_csr_bankarray_csrbank1_out0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank1_out0_re <= builder_csr_bankarray_interface1_bank_bus_we;
        builder_csr_bankarray_csrbank1_out0_we <= builder_csr_bankarray_interface1_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank1_out0_w = main_storage;
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank2_tx_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_tx_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_tx_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank2_tx_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_tx_enable0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_rx_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_rx_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_rx_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank2_rx_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_rx_enable0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_tx_ready_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_tx_ready_re <= 1'd0;
    builder_csr_bankarray_csrbank2_tx_ready_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank2_tx_ready_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_tx_ready_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_rx_ready_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_rx_ready_re <= 1'd0;
    builder_csr_bankarray_csrbank2_rx_ready_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank2_rx_ready_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_rx_ready_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_tx_prbs_config0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_tx_prbs_config0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_tx_prbs_config0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank2_tx_prbs_config0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_tx_prbs_config0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_rx_prbs_config0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank2_rx_prbs_config0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_rx_prbs_config0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank2_rx_prbs_config0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_rx_prbs_config0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_rx_prbs_pause0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank2_rx_prbs_pause0_re <= 1'd0;
    builder_csr_bankarray_csrbank2_rx_prbs_pause0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank2_rx_prbs_pause0_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_rx_prbs_pause0_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank2_rx_prbs_errors_r = builder_csr_bankarray_interface2_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank2_rx_prbs_errors_re <= 1'd0;
    builder_csr_bankarray_csrbank2_rx_prbs_errors_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank2_rx_prbs_errors_re <= builder_csr_bankarray_interface2_bank_bus_we;
        builder_csr_bankarray_csrbank2_rx_prbs_errors_we <= builder_csr_bankarray_interface2_bank_bus_re;
    end
end
assign main_enable0 = main_tx_enable_storage;
assign builder_csr_bankarray_csrbank2_tx_enable0_w = main_tx_enable_storage;
assign main_enable1 = main_rx_enable_storage;
assign builder_csr_bankarray_csrbank2_rx_enable0_w = main_rx_enable_storage;
assign main_tx_ready_status = main_ready0;
assign builder_csr_bankarray_csrbank2_tx_ready_w = main_tx_ready_status;
assign main_tx_ready_we = builder_csr_bankarray_csrbank2_tx_ready_we;
assign main_rx_ready_status = main_ready1;
assign builder_csr_bankarray_csrbank2_rx_ready_w = main_rx_ready_status;
assign main_rx_ready_we = builder_csr_bankarray_csrbank2_rx_ready_we;
assign builder_csr_bankarray_csrbank2_tx_prbs_config0_w = main_tx_prbs_config_storage;
assign builder_csr_bankarray_csrbank2_rx_prbs_config0_w = main_rx_prbs_config_storage;
assign builder_csr_bankarray_csrbank2_rx_prbs_pause0_w = main_rx_prbs_pause_storage;
assign builder_csr_bankarray_csrbank2_rx_prbs_errors_w = main_rx_prbs_errors_status;
assign main_rx_prbs_errors_we = builder_csr_bankarray_csrbank2_rx_prbs_errors_we;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign builder_csr_bankarray_csrbank3_load0_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_load0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_load0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csr_bankarray_csrbank3_load0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_load0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_reload0_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_reload0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_reload0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank3_reload0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_reload0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_en0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_en0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_en0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank3_en0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_en0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_update_value0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_update_value0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_update_value0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank3_update_value0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_update_value0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_value_r = builder_csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csr_bankarray_csrbank3_value_re <= 1'd0;
    builder_csr_bankarray_csrbank3_value_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank3_value_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_value_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank3_ev_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_status_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_pending_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank3_ev_pending_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_pending_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_ev_enable0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank3_ev_enable0_re <= builder_csr_bankarray_interface3_bank_bus_we;
        builder_csr_bankarray_csrbank3_ev_enable0_we <= builder_csr_bankarray_interface3_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank3_load0_w = main_basesoc_timer_load_storage;
assign builder_csr_bankarray_csrbank3_reload0_w = main_basesoc_timer_reload_storage;
assign builder_csr_bankarray_csrbank3_en0_w = main_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank3_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank3_value_w = main_basesoc_timer_value_status;
assign main_basesoc_timer_value_we = builder_csr_bankarray_csrbank3_value_we;
assign main_basesoc_timer_status_status = main_basesoc_timer_zero0;
assign builder_csr_bankarray_csrbank3_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csr_bankarray_csrbank3_ev_status_we;
assign main_basesoc_timer_pending_status = main_basesoc_timer_zero1;
assign builder_csr_bankarray_csrbank3_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csr_bankarray_csrbank3_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank3_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign main_basesoc_uart_rxtx_r = builder_csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface4_bank_bus_we;
        main_basesoc_uart_rxtx_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_txfull_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_txfull_re <= 1'd0;
    builder_csr_bankarray_csrbank4_txfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csr_bankarray_csrbank4_txfull_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_txfull_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_rxempty_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_rxempty_re <= 1'd0;
    builder_csr_bankarray_csrbank4_rxempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csr_bankarray_csrbank4_rxempty_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_rxempty_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_status_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csr_bankarray_csrbank4_ev_status_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_status_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_pending_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csr_bankarray_csrbank4_ev_pending_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_pending_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_ev_enable0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    builder_csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csr_bankarray_csrbank4_ev_enable0_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_ev_enable0_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_txempty_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_txempty_re <= 1'd0;
    builder_csr_bankarray_csrbank4_txempty_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csr_bankarray_csrbank4_txempty_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_txempty_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_rxfull_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csr_bankarray_csrbank4_rxfull_re <= 1'd0;
    builder_csr_bankarray_csrbank4_rxfull_we <= 1'd0;
    if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csr_bankarray_csrbank4_rxfull_re <= builder_csr_bankarray_interface4_bank_bus_we;
        builder_csr_bankarray_csrbank4_rxfull_we <= builder_csr_bankarray_interface4_bank_bus_re;
    end
end
assign builder_csr_bankarray_csrbank4_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank4_txfull_we;
assign builder_csr_bankarray_csrbank4_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank4_rxempty_we;
always @(*) begin
    main_basesoc_uart_status_status <= 2'd0;
    main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
    main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank4_ev_status_w = main_basesoc_uart_status_status;
assign main_basesoc_uart_status_we = builder_csr_bankarray_csrbank4_ev_status_we;
always @(*) begin
    main_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
    main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank4_ev_pending_w = main_basesoc_uart_pending_status;
assign main_basesoc_uart_pending_we = builder_csr_bankarray_csrbank4_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank4_ev_enable0_w = main_basesoc_uart_enable_storage;
assign builder_csr_bankarray_csrbank4_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank4_txempty_we;
assign builder_csr_bankarray_csrbank4_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank4_rxfull_we;
assign builder_csr_interconnect_adr = builder_interface1_adr;
assign builder_csr_interconnect_re = builder_interface1_re;
assign builder_csr_interconnect_we = builder_interface1_we;
assign builder_csr_interconnect_dat_w = builder_interface1_dat_w;
assign builder_interface1_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface1_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface2_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface3_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface4_bank_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_sram_bus_re = builder_csr_interconnect_re;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
    builder_self0 <= 30'd0;
    case (builder_grant)
        1'd0: begin
            builder_self0 <= main_basesoc_ibus_adr;
        end
        default: begin
            builder_self0 <= main_basesoc_dbus_adr;
        end
    endcase
end
always @(*) begin
    builder_self1 <= 32'd0;
    case (builder_grant)
        1'd0: begin
            builder_self1 <= main_basesoc_ibus_dat_w;
        end
        default: begin
            builder_self1 <= main_basesoc_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    builder_self2 <= 4'd0;
    case (builder_grant)
        1'd0: begin
            builder_self2 <= main_basesoc_ibus_sel;
        end
        default: begin
            builder_self2 <= main_basesoc_dbus_sel;
        end
    endcase
end
always @(*) begin
    builder_self3 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_self3 <= main_basesoc_ibus_cyc;
        end
        default: begin
            builder_self3 <= main_basesoc_dbus_cyc;
        end
    endcase
end
always @(*) begin
    builder_self4 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_self4 <= main_basesoc_ibus_stb;
        end
        default: begin
            builder_self4 <= main_basesoc_dbus_stb;
        end
    endcase
end
always @(*) begin
    builder_self5 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_self5 <= main_basesoc_ibus_we;
        end
        default: begin
            builder_self5 <= main_basesoc_dbus_we;
        end
    endcase
end
always @(*) begin
    builder_self6 <= 3'd0;
    case (builder_grant)
        1'd0: begin
            builder_self6 <= main_basesoc_ibus_cti;
        end
        default: begin
            builder_self6 <= main_basesoc_dbus_cti;
        end
    endcase
end
always @(*) begin
    builder_self7 <= 2'd0;
    case (builder_grant)
        1'd0: begin
            builder_self7 <= main_basesoc_ibus_bte;
        end
        default: begin
            builder_self7 <= main_basesoc_dbus_bte;
        end
    endcase
end
always @(*) begin
    builder_f_self0 <= 6'd0;
    case (main_singleencoder0_d[4:0])
        1'd0: begin
            builder_f_self0 <= 5'd24;
        end
        1'd1: begin
            builder_f_self0 <= 6'd34;
        end
        2'd2: begin
            builder_f_self0 <= 5'd18;
        end
        2'd3: begin
            builder_f_self0 <= 6'd49;
        end
        3'd4: begin
            builder_f_self0 <= 4'd10;
        end
        3'd5: begin
            builder_f_self0 <= 6'd41;
        end
        3'd6: begin
            builder_f_self0 <= 5'd25;
        end
        3'd7: begin
            builder_f_self0 <= 3'd7;
        end
        4'd8: begin
            builder_f_self0 <= 3'd6;
        end
        4'd9: begin
            builder_f_self0 <= 6'd37;
        end
        4'd10: begin
            builder_f_self0 <= 5'd21;
        end
        4'd11: begin
            builder_f_self0 <= 6'd52;
        end
        4'd12: begin
            builder_f_self0 <= 4'd13;
        end
        4'd13: begin
            builder_f_self0 <= 6'd44;
        end
        4'd14: begin
            builder_f_self0 <= 5'd28;
        end
        4'd15: begin
            builder_f_self0 <= 6'd40;
        end
        5'd16: begin
            builder_f_self0 <= 6'd36;
        end
        5'd17: begin
            builder_f_self0 <= 6'd35;
        end
        5'd18: begin
            builder_f_self0 <= 5'd19;
        end
        5'd19: begin
            builder_f_self0 <= 6'd50;
        end
        5'd20: begin
            builder_f_self0 <= 4'd11;
        end
        5'd21: begin
            builder_f_self0 <= 6'd42;
        end
        5'd22: begin
            builder_f_self0 <= 5'd26;
        end
        5'd23: begin
            builder_f_self0 <= 3'd5;
        end
        5'd24: begin
            builder_f_self0 <= 4'd12;
        end
        5'd25: begin
            builder_f_self0 <= 6'd38;
        end
        5'd26: begin
            builder_f_self0 <= 5'd22;
        end
        5'd27: begin
            builder_f_self0 <= 4'd9;
        end
        5'd28: begin
            builder_f_self0 <= 4'd14;
        end
        5'd29: begin
            builder_f_self0 <= 5'd17;
        end
        5'd30: begin
            builder_f_self0 <= 6'd33;
        end
        default: begin
            builder_f_self0 <= 5'd20;
        end
    endcase
end
always @(*) begin
    builder_f_self1 <= 1'd0;
    case (main_singleencoder0_d[4:0])
        1'd0: begin
            builder_f_self1 <= 1'd1;
        end
        1'd1: begin
            builder_f_self1 <= 1'd1;
        end
        2'd2: begin
            builder_f_self1 <= 1'd1;
        end
        2'd3: begin
            builder_f_self1 <= 1'd0;
        end
        3'd4: begin
            builder_f_self1 <= 1'd1;
        end
        3'd5: begin
            builder_f_self1 <= 1'd0;
        end
        3'd6: begin
            builder_f_self1 <= 1'd0;
        end
        3'd7: begin
            builder_f_self1 <= 1'd0;
        end
        4'd8: begin
            builder_f_self1 <= 1'd1;
        end
        4'd9: begin
            builder_f_self1 <= 1'd0;
        end
        4'd10: begin
            builder_f_self1 <= 1'd0;
        end
        4'd11: begin
            builder_f_self1 <= 1'd0;
        end
        4'd12: begin
            builder_f_self1 <= 1'd0;
        end
        4'd13: begin
            builder_f_self1 <= 1'd0;
        end
        4'd14: begin
            builder_f_self1 <= 1'd0;
        end
        4'd15: begin
            builder_f_self1 <= 1'd1;
        end
        5'd16: begin
            builder_f_self1 <= 1'd1;
        end
        5'd17: begin
            builder_f_self1 <= 1'd0;
        end
        5'd18: begin
            builder_f_self1 <= 1'd0;
        end
        5'd19: begin
            builder_f_self1 <= 1'd0;
        end
        5'd20: begin
            builder_f_self1 <= 1'd0;
        end
        5'd21: begin
            builder_f_self1 <= 1'd0;
        end
        5'd22: begin
            builder_f_self1 <= 1'd0;
        end
        5'd23: begin
            builder_f_self1 <= 1'd1;
        end
        5'd24: begin
            builder_f_self1 <= 1'd1;
        end
        5'd25: begin
            builder_f_self1 <= 1'd0;
        end
        5'd26: begin
            builder_f_self1 <= 1'd0;
        end
        5'd27: begin
            builder_f_self1 <= 1'd1;
        end
        5'd28: begin
            builder_f_self1 <= 1'd0;
        end
        5'd29: begin
            builder_f_self1 <= 1'd1;
        end
        5'd30: begin
            builder_f_self1 <= 1'd1;
        end
        default: begin
            builder_f_self1 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_f_self2 <= 1'd0;
    case (main_singleencoder0_d[4:0])
        1'd0: begin
            builder_f_self2 <= 1'd1;
        end
        1'd1: begin
            builder_f_self2 <= 1'd1;
        end
        2'd2: begin
            builder_f_self2 <= 1'd1;
        end
        2'd3: begin
            builder_f_self2 <= 1'd0;
        end
        3'd4: begin
            builder_f_self2 <= 1'd1;
        end
        3'd5: begin
            builder_f_self2 <= 1'd0;
        end
        3'd6: begin
            builder_f_self2 <= 1'd0;
        end
        3'd7: begin
            builder_f_self2 <= 1'd1;
        end
        4'd8: begin
            builder_f_self2 <= 1'd1;
        end
        4'd9: begin
            builder_f_self2 <= 1'd0;
        end
        4'd10: begin
            builder_f_self2 <= 1'd0;
        end
        4'd11: begin
            builder_f_self2 <= 1'd0;
        end
        4'd12: begin
            builder_f_self2 <= 1'd0;
        end
        4'd13: begin
            builder_f_self2 <= 1'd0;
        end
        4'd14: begin
            builder_f_self2 <= 1'd0;
        end
        4'd15: begin
            builder_f_self2 <= 1'd1;
        end
        5'd16: begin
            builder_f_self2 <= 1'd1;
        end
        5'd17: begin
            builder_f_self2 <= 1'd0;
        end
        5'd18: begin
            builder_f_self2 <= 1'd0;
        end
        5'd19: begin
            builder_f_self2 <= 1'd0;
        end
        5'd20: begin
            builder_f_self2 <= 1'd0;
        end
        5'd21: begin
            builder_f_self2 <= 1'd0;
        end
        5'd22: begin
            builder_f_self2 <= 1'd0;
        end
        5'd23: begin
            builder_f_self2 <= 1'd1;
        end
        5'd24: begin
            builder_f_self2 <= 1'd1;
        end
        5'd25: begin
            builder_f_self2 <= 1'd0;
        end
        5'd26: begin
            builder_f_self2 <= 1'd0;
        end
        5'd27: begin
            builder_f_self2 <= 1'd1;
        end
        5'd28: begin
            builder_f_self2 <= 1'd0;
        end
        5'd29: begin
            builder_f_self2 <= 1'd1;
        end
        5'd30: begin
            builder_f_self2 <= 1'd1;
        end
        default: begin
            builder_f_self2 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_rhs_self0 <= 4'd0;
    case (main_singleencoder0_d[7:5])
        1'd0: begin
            builder_rhs_self0 <= 3'd4;
        end
        1'd1: begin
            builder_rhs_self0 <= 4'd9;
        end
        2'd2: begin
            builder_rhs_self0 <= 3'd5;
        end
        2'd3: begin
            builder_rhs_self0 <= 2'd3;
        end
        3'd4: begin
            builder_rhs_self0 <= 2'd2;
        end
        3'd5: begin
            builder_rhs_self0 <= 4'd10;
        end
        3'd6: begin
            builder_rhs_self0 <= 3'd6;
        end
        default: begin
            builder_rhs_self0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_rhs_self1 <= 1'd0;
    case (main_singleencoder0_d[7:5])
        1'd0: begin
            builder_rhs_self1 <= 1'd1;
        end
        1'd1: begin
            builder_rhs_self1 <= 1'd0;
        end
        2'd2: begin
            builder_rhs_self1 <= 1'd0;
        end
        2'd3: begin
            builder_rhs_self1 <= 1'd0;
        end
        3'd4: begin
            builder_rhs_self1 <= 1'd1;
        end
        3'd5: begin
            builder_rhs_self1 <= 1'd0;
        end
        3'd6: begin
            builder_rhs_self1 <= 1'd0;
        end
        default: begin
            builder_rhs_self1 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_f_self3 <= 1'd0;
    case (main_singleencoder0_d[7:5])
        1'd0: begin
            builder_f_self3 <= 1'd1;
        end
        1'd1: begin
            builder_f_self3 <= 1'd0;
        end
        2'd2: begin
            builder_f_self3 <= 1'd0;
        end
        2'd3: begin
            builder_f_self3 <= 1'd1;
        end
        3'd4: begin
            builder_f_self3 <= 1'd1;
        end
        3'd5: begin
            builder_f_self3 <= 1'd0;
        end
        3'd6: begin
            builder_f_self3 <= 1'd0;
        end
        default: begin
            builder_f_self3 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_f_self4 <= 6'd0;
    case (main_singleencoder1_d[4:0])
        1'd0: begin
            builder_f_self4 <= 5'd24;
        end
        1'd1: begin
            builder_f_self4 <= 6'd34;
        end
        2'd2: begin
            builder_f_self4 <= 5'd18;
        end
        2'd3: begin
            builder_f_self4 <= 6'd49;
        end
        3'd4: begin
            builder_f_self4 <= 4'd10;
        end
        3'd5: begin
            builder_f_self4 <= 6'd41;
        end
        3'd6: begin
            builder_f_self4 <= 5'd25;
        end
        3'd7: begin
            builder_f_self4 <= 3'd7;
        end
        4'd8: begin
            builder_f_self4 <= 3'd6;
        end
        4'd9: begin
            builder_f_self4 <= 6'd37;
        end
        4'd10: begin
            builder_f_self4 <= 5'd21;
        end
        4'd11: begin
            builder_f_self4 <= 6'd52;
        end
        4'd12: begin
            builder_f_self4 <= 4'd13;
        end
        4'd13: begin
            builder_f_self4 <= 6'd44;
        end
        4'd14: begin
            builder_f_self4 <= 5'd28;
        end
        4'd15: begin
            builder_f_self4 <= 6'd40;
        end
        5'd16: begin
            builder_f_self4 <= 6'd36;
        end
        5'd17: begin
            builder_f_self4 <= 6'd35;
        end
        5'd18: begin
            builder_f_self4 <= 5'd19;
        end
        5'd19: begin
            builder_f_self4 <= 6'd50;
        end
        5'd20: begin
            builder_f_self4 <= 4'd11;
        end
        5'd21: begin
            builder_f_self4 <= 6'd42;
        end
        5'd22: begin
            builder_f_self4 <= 5'd26;
        end
        5'd23: begin
            builder_f_self4 <= 3'd5;
        end
        5'd24: begin
            builder_f_self4 <= 4'd12;
        end
        5'd25: begin
            builder_f_self4 <= 6'd38;
        end
        5'd26: begin
            builder_f_self4 <= 5'd22;
        end
        5'd27: begin
            builder_f_self4 <= 4'd9;
        end
        5'd28: begin
            builder_f_self4 <= 4'd14;
        end
        5'd29: begin
            builder_f_self4 <= 5'd17;
        end
        5'd30: begin
            builder_f_self4 <= 6'd33;
        end
        default: begin
            builder_f_self4 <= 5'd20;
        end
    endcase
end
always @(*) begin
    builder_f_self5 <= 1'd0;
    case (main_singleencoder1_d[4:0])
        1'd0: begin
            builder_f_self5 <= 1'd1;
        end
        1'd1: begin
            builder_f_self5 <= 1'd1;
        end
        2'd2: begin
            builder_f_self5 <= 1'd1;
        end
        2'd3: begin
            builder_f_self5 <= 1'd0;
        end
        3'd4: begin
            builder_f_self5 <= 1'd1;
        end
        3'd5: begin
            builder_f_self5 <= 1'd0;
        end
        3'd6: begin
            builder_f_self5 <= 1'd0;
        end
        3'd7: begin
            builder_f_self5 <= 1'd0;
        end
        4'd8: begin
            builder_f_self5 <= 1'd1;
        end
        4'd9: begin
            builder_f_self5 <= 1'd0;
        end
        4'd10: begin
            builder_f_self5 <= 1'd0;
        end
        4'd11: begin
            builder_f_self5 <= 1'd0;
        end
        4'd12: begin
            builder_f_self5 <= 1'd0;
        end
        4'd13: begin
            builder_f_self5 <= 1'd0;
        end
        4'd14: begin
            builder_f_self5 <= 1'd0;
        end
        4'd15: begin
            builder_f_self5 <= 1'd1;
        end
        5'd16: begin
            builder_f_self5 <= 1'd1;
        end
        5'd17: begin
            builder_f_self5 <= 1'd0;
        end
        5'd18: begin
            builder_f_self5 <= 1'd0;
        end
        5'd19: begin
            builder_f_self5 <= 1'd0;
        end
        5'd20: begin
            builder_f_self5 <= 1'd0;
        end
        5'd21: begin
            builder_f_self5 <= 1'd0;
        end
        5'd22: begin
            builder_f_self5 <= 1'd0;
        end
        5'd23: begin
            builder_f_self5 <= 1'd1;
        end
        5'd24: begin
            builder_f_self5 <= 1'd1;
        end
        5'd25: begin
            builder_f_self5 <= 1'd0;
        end
        5'd26: begin
            builder_f_self5 <= 1'd0;
        end
        5'd27: begin
            builder_f_self5 <= 1'd1;
        end
        5'd28: begin
            builder_f_self5 <= 1'd0;
        end
        5'd29: begin
            builder_f_self5 <= 1'd1;
        end
        5'd30: begin
            builder_f_self5 <= 1'd1;
        end
        default: begin
            builder_f_self5 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_f_self6 <= 1'd0;
    case (main_singleencoder1_d[4:0])
        1'd0: begin
            builder_f_self6 <= 1'd1;
        end
        1'd1: begin
            builder_f_self6 <= 1'd1;
        end
        2'd2: begin
            builder_f_self6 <= 1'd1;
        end
        2'd3: begin
            builder_f_self6 <= 1'd0;
        end
        3'd4: begin
            builder_f_self6 <= 1'd1;
        end
        3'd5: begin
            builder_f_self6 <= 1'd0;
        end
        3'd6: begin
            builder_f_self6 <= 1'd0;
        end
        3'd7: begin
            builder_f_self6 <= 1'd1;
        end
        4'd8: begin
            builder_f_self6 <= 1'd1;
        end
        4'd9: begin
            builder_f_self6 <= 1'd0;
        end
        4'd10: begin
            builder_f_self6 <= 1'd0;
        end
        4'd11: begin
            builder_f_self6 <= 1'd0;
        end
        4'd12: begin
            builder_f_self6 <= 1'd0;
        end
        4'd13: begin
            builder_f_self6 <= 1'd0;
        end
        4'd14: begin
            builder_f_self6 <= 1'd0;
        end
        4'd15: begin
            builder_f_self6 <= 1'd1;
        end
        5'd16: begin
            builder_f_self6 <= 1'd1;
        end
        5'd17: begin
            builder_f_self6 <= 1'd0;
        end
        5'd18: begin
            builder_f_self6 <= 1'd0;
        end
        5'd19: begin
            builder_f_self6 <= 1'd0;
        end
        5'd20: begin
            builder_f_self6 <= 1'd0;
        end
        5'd21: begin
            builder_f_self6 <= 1'd0;
        end
        5'd22: begin
            builder_f_self6 <= 1'd0;
        end
        5'd23: begin
            builder_f_self6 <= 1'd1;
        end
        5'd24: begin
            builder_f_self6 <= 1'd1;
        end
        5'd25: begin
            builder_f_self6 <= 1'd0;
        end
        5'd26: begin
            builder_f_self6 <= 1'd0;
        end
        5'd27: begin
            builder_f_self6 <= 1'd1;
        end
        5'd28: begin
            builder_f_self6 <= 1'd0;
        end
        5'd29: begin
            builder_f_self6 <= 1'd1;
        end
        5'd30: begin
            builder_f_self6 <= 1'd1;
        end
        default: begin
            builder_f_self6 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_rhs_self2 <= 4'd0;
    case (main_singleencoder1_d[7:5])
        1'd0: begin
            builder_rhs_self2 <= 3'd4;
        end
        1'd1: begin
            builder_rhs_self2 <= 4'd9;
        end
        2'd2: begin
            builder_rhs_self2 <= 3'd5;
        end
        2'd3: begin
            builder_rhs_self2 <= 2'd3;
        end
        3'd4: begin
            builder_rhs_self2 <= 2'd2;
        end
        3'd5: begin
            builder_rhs_self2 <= 4'd10;
        end
        3'd6: begin
            builder_rhs_self2 <= 3'd6;
        end
        default: begin
            builder_rhs_self2 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_rhs_self3 <= 1'd0;
    case (main_singleencoder1_d[7:5])
        1'd0: begin
            builder_rhs_self3 <= 1'd1;
        end
        1'd1: begin
            builder_rhs_self3 <= 1'd0;
        end
        2'd2: begin
            builder_rhs_self3 <= 1'd0;
        end
        2'd3: begin
            builder_rhs_self3 <= 1'd0;
        end
        3'd4: begin
            builder_rhs_self3 <= 1'd1;
        end
        3'd5: begin
            builder_rhs_self3 <= 1'd0;
        end
        3'd6: begin
            builder_rhs_self3 <= 1'd0;
        end
        default: begin
            builder_rhs_self3 <= 1'd1;
        end
    endcase
end
always @(*) begin
    builder_f_self7 <= 1'd0;
    case (main_singleencoder1_d[7:5])
        1'd0: begin
            builder_f_self7 <= 1'd1;
        end
        1'd1: begin
            builder_f_self7 <= 1'd0;
        end
        2'd2: begin
            builder_f_self7 <= 1'd0;
        end
        2'd3: begin
            builder_f_self7 <= 1'd1;
        end
        3'd4: begin
            builder_f_self7 <= 1'd1;
        end
        3'd5: begin
            builder_f_self7 <= 1'd0;
        end
        3'd6: begin
            builder_f_self7 <= 1'd0;
        end
        default: begin
            builder_f_self7 <= 1'd1;
        end
    endcase
end
assign main_basesoc_rx_rx = builder_multiregimpl0_regs1;
assign main_prbstx_config1 = builder_multiregimpl1_regs1;
assign main_prbsrx_config1 = builder_multiregimpl2_regs1;
assign main_tx_prbs_config1 = builder_multiregimpl3_regs1;
assign main_rx_prbs_config1 = builder_multiregimpl4_regs1;
assign main_rx_prbs_pause1 = builder_multiregimpl5_regs1;
assign main_prbs_errors = builder_multiregimpl6_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge rx_clk) begin
    main_input0 <= main_rx_data[9:0];
    main_input1 <= main_rx_data[19:10];
    if ((main_prbsrx_config1 == 1'd0)) begin
        main_prbsrx_errors <= 1'd0;
    end else begin
        if (($signed({1'd0, (~main_prbsrx_pause)}) & (-1'd1 | $signed({1'd0, (main_prbsrx_errors != 32'd4294967295)})))) begin
            if ((main_prbsrx_config1 == 1'd1)) begin
                main_prbsrx_errors <= (main_prbsrx_errors + (main_prbsrx_prbs7_errors != 1'd0));
            end
            if ((main_prbsrx_config1 == 2'd2)) begin
                main_prbsrx_errors <= (main_prbsrx_errors + (main_prbsrx_prbs15_errors != 1'd0));
            end
            if ((main_prbsrx_config1 == 2'd3)) begin
                main_prbsrx_errors <= (main_prbsrx_errors + (main_prbsrx_prbs31_errors != 1'd0));
            end
        end
    end
    main_prbsrx_prbs7_errors[19] <= (main_prbsrx_prbs7_i[19] != (main_prbsrx_prbs7_n_in[5] ^ main_prbsrx_prbs7_n_in[6]));
    main_prbsrx_prbs7_errors[18] <= (main_prbsrx_prbs7_i[18] != (main_prbsrx_prbs7_n_in[4] ^ main_prbsrx_prbs7_n_in[5]));
    main_prbsrx_prbs7_errors[17] <= (main_prbsrx_prbs7_i[17] != (main_prbsrx_prbs7_n_in[3] ^ main_prbsrx_prbs7_n_in[4]));
    main_prbsrx_prbs7_errors[16] <= (main_prbsrx_prbs7_i[16] != (main_prbsrx_prbs7_n_in[2] ^ main_prbsrx_prbs7_n_in[3]));
    main_prbsrx_prbs7_errors[15] <= (main_prbsrx_prbs7_i[15] != (main_prbsrx_prbs7_n_in[1] ^ main_prbsrx_prbs7_n_in[2]));
    main_prbsrx_prbs7_errors[14] <= (main_prbsrx_prbs7_i[14] != (main_prbsrx_prbs7_n_in[0] ^ main_prbsrx_prbs7_n_in[1]));
    main_prbsrx_prbs7_errors[13] <= (main_prbsrx_prbs7_i[13] != (main_prbsrx_prbs7_i[19] ^ main_prbsrx_prbs7_n_in[0]));
    main_prbsrx_prbs7_errors[12] <= (main_prbsrx_prbs7_i[12] != (main_prbsrx_prbs7_i[18] ^ main_prbsrx_prbs7_i[19]));
    main_prbsrx_prbs7_errors[11] <= (main_prbsrx_prbs7_i[11] != (main_prbsrx_prbs7_i[17] ^ main_prbsrx_prbs7_i[18]));
    main_prbsrx_prbs7_errors[10] <= (main_prbsrx_prbs7_i[10] != (main_prbsrx_prbs7_i[16] ^ main_prbsrx_prbs7_i[17]));
    main_prbsrx_prbs7_errors[9] <= (main_prbsrx_prbs7_i[9] != (main_prbsrx_prbs7_i[15] ^ main_prbsrx_prbs7_i[16]));
    main_prbsrx_prbs7_errors[8] <= (main_prbsrx_prbs7_i[8] != (main_prbsrx_prbs7_i[14] ^ main_prbsrx_prbs7_i[15]));
    main_prbsrx_prbs7_errors[7] <= (main_prbsrx_prbs7_i[7] != (main_prbsrx_prbs7_i[13] ^ main_prbsrx_prbs7_i[14]));
    main_prbsrx_prbs7_errors[6] <= (main_prbsrx_prbs7_i[6] != (main_prbsrx_prbs7_i[12] ^ main_prbsrx_prbs7_i[13]));
    main_prbsrx_prbs7_errors[5] <= (main_prbsrx_prbs7_i[5] != (main_prbsrx_prbs7_i[11] ^ main_prbsrx_prbs7_i[12]));
    main_prbsrx_prbs7_errors[4] <= (main_prbsrx_prbs7_i[4] != (main_prbsrx_prbs7_i[10] ^ main_prbsrx_prbs7_i[11]));
    main_prbsrx_prbs7_errors[3] <= (main_prbsrx_prbs7_i[3] != (main_prbsrx_prbs7_i[9] ^ main_prbsrx_prbs7_i[10]));
    main_prbsrx_prbs7_errors[2] <= (main_prbsrx_prbs7_i[2] != (main_prbsrx_prbs7_i[8] ^ main_prbsrx_prbs7_i[9]));
    main_prbsrx_prbs7_errors[1] <= (main_prbsrx_prbs7_i[1] != (main_prbsrx_prbs7_i[7] ^ main_prbsrx_prbs7_i[8]));
    main_prbsrx_prbs7_errors[0] <= (main_prbsrx_prbs7_i[0] != (main_prbsrx_prbs7_i[6] ^ main_prbsrx_prbs7_i[7]));
    main_prbsrx_prbs7_n_in <= {main_prbsrx_prbs7_i[6], main_prbsrx_prbs7_i[5], main_prbsrx_prbs7_i[4], main_prbsrx_prbs7_i[3], main_prbsrx_prbs7_i[2], main_prbsrx_prbs7_i[1], main_prbsrx_prbs7_i[0]};
    main_prbsrx_prbs7_i_last <= main_prbsrx_prbs7_i;
    if (main_prbsrx_prbs7_done) begin
        main_prbsrx_prbs7_errors <= 20'd1048575;
    end
    if (main_prbsrx_prbs7_wait) begin
        if ((~main_prbsrx_prbs7_done)) begin
            main_prbsrx_prbs7_count <= (main_prbsrx_prbs7_count - 1'd1);
        end
    end else begin
        main_prbsrx_prbs7_count <= 11'd1024;
    end
    main_prbsrx_prbs15_errors[19] <= (main_prbsrx_prbs15_i[19] != (main_prbsrx_prbs15_n_in[13] ^ main_prbsrx_prbs15_n_in[14]));
    main_prbsrx_prbs15_errors[18] <= (main_prbsrx_prbs15_i[18] != (main_prbsrx_prbs15_n_in[12] ^ main_prbsrx_prbs15_n_in[13]));
    main_prbsrx_prbs15_errors[17] <= (main_prbsrx_prbs15_i[17] != (main_prbsrx_prbs15_n_in[11] ^ main_prbsrx_prbs15_n_in[12]));
    main_prbsrx_prbs15_errors[16] <= (main_prbsrx_prbs15_i[16] != (main_prbsrx_prbs15_n_in[10] ^ main_prbsrx_prbs15_n_in[11]));
    main_prbsrx_prbs15_errors[15] <= (main_prbsrx_prbs15_i[15] != (main_prbsrx_prbs15_n_in[9] ^ main_prbsrx_prbs15_n_in[10]));
    main_prbsrx_prbs15_errors[14] <= (main_prbsrx_prbs15_i[14] != (main_prbsrx_prbs15_n_in[8] ^ main_prbsrx_prbs15_n_in[9]));
    main_prbsrx_prbs15_errors[13] <= (main_prbsrx_prbs15_i[13] != (main_prbsrx_prbs15_n_in[7] ^ main_prbsrx_prbs15_n_in[8]));
    main_prbsrx_prbs15_errors[12] <= (main_prbsrx_prbs15_i[12] != (main_prbsrx_prbs15_n_in[6] ^ main_prbsrx_prbs15_n_in[7]));
    main_prbsrx_prbs15_errors[11] <= (main_prbsrx_prbs15_i[11] != (main_prbsrx_prbs15_n_in[5] ^ main_prbsrx_prbs15_n_in[6]));
    main_prbsrx_prbs15_errors[10] <= (main_prbsrx_prbs15_i[10] != (main_prbsrx_prbs15_n_in[4] ^ main_prbsrx_prbs15_n_in[5]));
    main_prbsrx_prbs15_errors[9] <= (main_prbsrx_prbs15_i[9] != (main_prbsrx_prbs15_n_in[3] ^ main_prbsrx_prbs15_n_in[4]));
    main_prbsrx_prbs15_errors[8] <= (main_prbsrx_prbs15_i[8] != (main_prbsrx_prbs15_n_in[2] ^ main_prbsrx_prbs15_n_in[3]));
    main_prbsrx_prbs15_errors[7] <= (main_prbsrx_prbs15_i[7] != (main_prbsrx_prbs15_n_in[1] ^ main_prbsrx_prbs15_n_in[2]));
    main_prbsrx_prbs15_errors[6] <= (main_prbsrx_prbs15_i[6] != (main_prbsrx_prbs15_n_in[0] ^ main_prbsrx_prbs15_n_in[1]));
    main_prbsrx_prbs15_errors[5] <= (main_prbsrx_prbs15_i[5] != (main_prbsrx_prbs15_i[19] ^ main_prbsrx_prbs15_n_in[0]));
    main_prbsrx_prbs15_errors[4] <= (main_prbsrx_prbs15_i[4] != (main_prbsrx_prbs15_i[18] ^ main_prbsrx_prbs15_i[19]));
    main_prbsrx_prbs15_errors[3] <= (main_prbsrx_prbs15_i[3] != (main_prbsrx_prbs15_i[17] ^ main_prbsrx_prbs15_i[18]));
    main_prbsrx_prbs15_errors[2] <= (main_prbsrx_prbs15_i[2] != (main_prbsrx_prbs15_i[16] ^ main_prbsrx_prbs15_i[17]));
    main_prbsrx_prbs15_errors[1] <= (main_prbsrx_prbs15_i[1] != (main_prbsrx_prbs15_i[15] ^ main_prbsrx_prbs15_i[16]));
    main_prbsrx_prbs15_errors[0] <= (main_prbsrx_prbs15_i[0] != (main_prbsrx_prbs15_i[14] ^ main_prbsrx_prbs15_i[15]));
    main_prbsrx_prbs15_n_in <= {main_prbsrx_prbs15_i[14], main_prbsrx_prbs15_i[13], main_prbsrx_prbs15_i[12], main_prbsrx_prbs15_i[11], main_prbsrx_prbs15_i[10], main_prbsrx_prbs15_i[9], main_prbsrx_prbs15_i[8], main_prbsrx_prbs15_i[7], main_prbsrx_prbs15_i[6], main_prbsrx_prbs15_i[5], main_prbsrx_prbs15_i[4], main_prbsrx_prbs15_i[3], main_prbsrx_prbs15_i[2], main_prbsrx_prbs15_i[1], main_prbsrx_prbs15_i[0]};
    main_prbsrx_prbs15_i_last <= main_prbsrx_prbs15_i;
    if (main_prbsrx_prbs15_done) begin
        main_prbsrx_prbs15_errors <= 20'd1048575;
    end
    if (main_prbsrx_prbs15_wait) begin
        if ((~main_prbsrx_prbs15_done)) begin
            main_prbsrx_prbs15_count <= (main_prbsrx_prbs15_count - 1'd1);
        end
    end else begin
        main_prbsrx_prbs15_count <= 11'd1024;
    end
    main_prbsrx_prbs31_errors[19] <= (main_prbsrx_prbs31_i[19] != (main_prbsrx_prbs31_n_in[27] ^ main_prbsrx_prbs31_n_in[30]));
    main_prbsrx_prbs31_errors[18] <= (main_prbsrx_prbs31_i[18] != (main_prbsrx_prbs31_n_in[26] ^ main_prbsrx_prbs31_n_in[29]));
    main_prbsrx_prbs31_errors[17] <= (main_prbsrx_prbs31_i[17] != (main_prbsrx_prbs31_n_in[25] ^ main_prbsrx_prbs31_n_in[28]));
    main_prbsrx_prbs31_errors[16] <= (main_prbsrx_prbs31_i[16] != (main_prbsrx_prbs31_n_in[24] ^ main_prbsrx_prbs31_n_in[27]));
    main_prbsrx_prbs31_errors[15] <= (main_prbsrx_prbs31_i[15] != (main_prbsrx_prbs31_n_in[23] ^ main_prbsrx_prbs31_n_in[26]));
    main_prbsrx_prbs31_errors[14] <= (main_prbsrx_prbs31_i[14] != (main_prbsrx_prbs31_n_in[22] ^ main_prbsrx_prbs31_n_in[25]));
    main_prbsrx_prbs31_errors[13] <= (main_prbsrx_prbs31_i[13] != (main_prbsrx_prbs31_n_in[21] ^ main_prbsrx_prbs31_n_in[24]));
    main_prbsrx_prbs31_errors[12] <= (main_prbsrx_prbs31_i[12] != (main_prbsrx_prbs31_n_in[20] ^ main_prbsrx_prbs31_n_in[23]));
    main_prbsrx_prbs31_errors[11] <= (main_prbsrx_prbs31_i[11] != (main_prbsrx_prbs31_n_in[19] ^ main_prbsrx_prbs31_n_in[22]));
    main_prbsrx_prbs31_errors[10] <= (main_prbsrx_prbs31_i[10] != (main_prbsrx_prbs31_n_in[18] ^ main_prbsrx_prbs31_n_in[21]));
    main_prbsrx_prbs31_errors[9] <= (main_prbsrx_prbs31_i[9] != (main_prbsrx_prbs31_n_in[17] ^ main_prbsrx_prbs31_n_in[20]));
    main_prbsrx_prbs31_errors[8] <= (main_prbsrx_prbs31_i[8] != (main_prbsrx_prbs31_n_in[16] ^ main_prbsrx_prbs31_n_in[19]));
    main_prbsrx_prbs31_errors[7] <= (main_prbsrx_prbs31_i[7] != (main_prbsrx_prbs31_n_in[15] ^ main_prbsrx_prbs31_n_in[18]));
    main_prbsrx_prbs31_errors[6] <= (main_prbsrx_prbs31_i[6] != (main_prbsrx_prbs31_n_in[14] ^ main_prbsrx_prbs31_n_in[17]));
    main_prbsrx_prbs31_errors[5] <= (main_prbsrx_prbs31_i[5] != (main_prbsrx_prbs31_n_in[13] ^ main_prbsrx_prbs31_n_in[16]));
    main_prbsrx_prbs31_errors[4] <= (main_prbsrx_prbs31_i[4] != (main_prbsrx_prbs31_n_in[12] ^ main_prbsrx_prbs31_n_in[15]));
    main_prbsrx_prbs31_errors[3] <= (main_prbsrx_prbs31_i[3] != (main_prbsrx_prbs31_n_in[11] ^ main_prbsrx_prbs31_n_in[14]));
    main_prbsrx_prbs31_errors[2] <= (main_prbsrx_prbs31_i[2] != (main_prbsrx_prbs31_n_in[10] ^ main_prbsrx_prbs31_n_in[13]));
    main_prbsrx_prbs31_errors[1] <= (main_prbsrx_prbs31_i[1] != (main_prbsrx_prbs31_n_in[9] ^ main_prbsrx_prbs31_n_in[12]));
    main_prbsrx_prbs31_errors[0] <= (main_prbsrx_prbs31_i[0] != (main_prbsrx_prbs31_n_in[8] ^ main_prbsrx_prbs31_n_in[11]));
    main_prbsrx_prbs31_n_in <= {main_prbsrx_prbs31_n_in[10], main_prbsrx_prbs31_n_in[9], main_prbsrx_prbs31_n_in[8], main_prbsrx_prbs31_n_in[7], main_prbsrx_prbs31_n_in[6], main_prbsrx_prbs31_n_in[5], main_prbsrx_prbs31_n_in[4], main_prbsrx_prbs31_n_in[3], main_prbsrx_prbs31_n_in[2], main_prbsrx_prbs31_n_in[1], main_prbsrx_prbs31_n_in[0], main_prbsrx_prbs31_i[19], main_prbsrx_prbs31_i[18], main_prbsrx_prbs31_i[17], main_prbsrx_prbs31_i[16], main_prbsrx_prbs31_i[15], main_prbsrx_prbs31_i[14], main_prbsrx_prbs31_i[13], main_prbsrx_prbs31_i[12], main_prbsrx_prbs31_i[11], main_prbsrx_prbs31_i[10], main_prbsrx_prbs31_i[9], main_prbsrx_prbs31_i[8], main_prbsrx_prbs31_i[7], main_prbsrx_prbs31_i[6], main_prbsrx_prbs31_i[5], main_prbsrx_prbs31_i[4], main_prbsrx_prbs31_i[3], main_prbsrx_prbs31_i[2], main_prbsrx_prbs31_i[1], main_prbsrx_prbs31_i[0]};
    main_prbsrx_prbs31_i_last <= main_prbsrx_prbs31_i;
    if (main_prbsrx_prbs31_done) begin
        main_prbsrx_prbs31_errors <= 20'd1048575;
    end
    if (main_prbsrx_prbs31_wait) begin
        if ((~main_prbsrx_prbs31_done)) begin
            main_prbsrx_prbs31_count <= (main_prbsrx_prbs31_count - 1'd1);
        end
    end else begin
        main_prbsrx_prbs31_count <= 11'd1024;
    end
    if (rx_rst) begin
        main_input0 <= 10'd0;
        main_input1 <= 10'd0;
        main_prbsrx_errors <= 32'd0;
        main_prbsrx_prbs7_errors <= 20'd0;
        main_prbsrx_prbs7_n_in <= 7'd1;
        main_prbsrx_prbs7_i_last <= 20'd0;
        main_prbsrx_prbs7_count <= 11'd1024;
        main_prbsrx_prbs15_errors <= 20'd0;
        main_prbsrx_prbs15_n_in <= 15'd1;
        main_prbsrx_prbs15_i_last <= 20'd0;
        main_prbsrx_prbs15_count <= 11'd1024;
        main_prbsrx_prbs31_errors <= 20'd0;
        main_prbsrx_prbs31_n_in <= 31'd1;
        main_prbsrx_prbs31_i_last <= 20'd0;
        main_prbsrx_prbs31_count <= 11'd1024;
    end
    builder_multiregimpl2_regs0 <= main_prbsrx_config0;
    builder_multiregimpl2_regs1 <= builder_multiregimpl2_regs0;
    builder_multiregimpl4_regs0 <= main_rx_prbs_config0;
    builder_multiregimpl4_regs1 <= builder_multiregimpl4_regs0;
    builder_multiregimpl5_regs0 <= main_rx_prbs_pause0;
    builder_multiregimpl5_regs1 <= builder_multiregimpl5_regs0;
end

always @(posedge sys_clk) begin
    case (builder_grant)
        1'd0: begin
            if ((~builder_request[0])) begin
                if (builder_request[1]) begin
                    builder_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~builder_request[1])) begin
                if (builder_request[0]) begin
                    builder_grant <= 1'd0;
                end
            end
        end
    endcase
    builder_slaves <= builder_master;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_bus_error) begin
            main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
        end
    end
    main_basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((main_basesoc_basesoc_ram_bus_cyc & main_basesoc_basesoc_ram_bus_stb) & ((~main_basesoc_basesoc_ram_bus_ack) | main_basesoc_basesoc_adr_burst))) begin
        main_basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & ((~main_basesoc_ram_bus_ram_bus_ack) | main_basesoc_ram_adr_burst))) begin
        main_basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 24'd9895604;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 24'd9895604);
    end
    builder_rs232phytx_state <= builder_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_usb_uart_tx_rs232phytx_next_value_ce1) begin
        usb_uart_tx <= main_basesoc_usb_uart_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 24'd9895604);
    end
    builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_uart_tx_clear) begin
        main_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
    if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_uart_rx_clear) begin
        main_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
    if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_tx_fifo_re) begin
            main_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_rx_fifo_re) begin
            main_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_timer_en_storage) begin
        if ((main_basesoc_timer_value == 1'd0)) begin
            main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_timer_value <= main_basesoc_timer_load_storage;
    end
    if (main_basesoc_timer_update_value_re) begin
        main_basesoc_timer_value_status <= main_basesoc_timer_value;
    end
    if (main_basesoc_timer_zero_clear) begin
        main_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
    if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_timer_zero_pending <= 1'd1;
    end
    if (main_done) begin
        main_chaser <= {main_chaser, (~main_chaser[7])};
    end
    if (main_re) begin
        main_mode <= 1'd1;
    end
    if (main_wait) begin
        if ((~main_done)) begin
            main_count <= (main_count - 1'd1);
        end
    end else begin
        main_count <= 22'd3125000;
    end
    if ((main_reset_counter < 11'd1500)) begin
        main_reset_counter <= (main_reset_counter + 1'd1);
        main_adpll_reset <= 1'd1;
    end else begin
        main_adpll_reset <= 1'd0;
    end
    if ((main_rx_reset | main_adpll_reset)) begin
        main_cdr_locked <= 1'd0;
        main_cdr_lock_counter <= 1'd0;
    end else begin
        if ((main_cdr_lock_counter < 11'd2000)) begin
            main_cdr_lock_counter <= (main_cdr_lock_counter + 1'd1);
        end else begin
            main_cdr_locked <= 1'd1;
        end
    end
    builder_state <= builder_next_state;
    builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank0_sel) begin
        case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank0_reset0_re) begin
        main_basesoc_reset_storage <= builder_csr_bankarray_csrbank0_reset0_r;
    end
    main_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
    if (builder_csr_bankarray_csrbank0_scratch0_re) begin
        main_basesoc_scratch_storage <= builder_csr_bankarray_csrbank0_scratch0_r;
    end
    main_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
    main_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
    builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
    builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank1_sel) begin
        case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_out0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank1_out0_re) begin
        main_storage <= builder_csr_bankarray_csrbank1_out0_r;
    end
    main_re <= builder_csr_bankarray_csrbank1_out0_re;
    builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank2_sel) begin
        case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_tx_enable0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rx_enable0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_tx_ready_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rx_ready_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_tx_prbs_config0_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rx_prbs_config0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rx_prbs_pause0_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rx_prbs_errors_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank2_tx_enable0_re) begin
        main_tx_enable_storage <= builder_csr_bankarray_csrbank2_tx_enable0_r;
    end
    main_tx_enable_re <= builder_csr_bankarray_csrbank2_tx_enable0_re;
    if (builder_csr_bankarray_csrbank2_rx_enable0_re) begin
        main_rx_enable_storage <= builder_csr_bankarray_csrbank2_rx_enable0_r;
    end
    main_rx_enable_re <= builder_csr_bankarray_csrbank2_rx_enable0_re;
    main_tx_ready_re <= builder_csr_bankarray_csrbank2_tx_ready_re;
    main_rx_ready_re <= builder_csr_bankarray_csrbank2_rx_ready_re;
    if (builder_csr_bankarray_csrbank2_tx_prbs_config0_re) begin
        main_tx_prbs_config_storage <= builder_csr_bankarray_csrbank2_tx_prbs_config0_r;
    end
    main_tx_prbs_config_re <= builder_csr_bankarray_csrbank2_tx_prbs_config0_re;
    if (builder_csr_bankarray_csrbank2_rx_prbs_config0_re) begin
        main_rx_prbs_config_storage <= builder_csr_bankarray_csrbank2_rx_prbs_config0_r;
    end
    main_rx_prbs_config_re <= builder_csr_bankarray_csrbank2_rx_prbs_config0_re;
    if (builder_csr_bankarray_csrbank2_rx_prbs_pause0_re) begin
        main_rx_prbs_pause_storage <= builder_csr_bankarray_csrbank2_rx_prbs_pause0_r;
    end
    main_rx_prbs_pause_re <= builder_csr_bankarray_csrbank2_rx_prbs_pause0_re;
    main_rx_prbs_errors_re <= builder_csr_bankarray_csrbank2_rx_prbs_errors_re;
    builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank3_sel) begin
        case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_load0_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_reload0_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_en0_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_update_value0_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_value_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_status_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_enable0_w;
            end
        endcase
    end
    if (builder_csr_bankarray_csrbank3_load0_re) begin
        main_basesoc_timer_load_storage <= builder_csr_bankarray_csrbank3_load0_r;
    end
    main_basesoc_timer_load_re <= builder_csr_bankarray_csrbank3_load0_re;
    if (builder_csr_bankarray_csrbank3_reload0_re) begin
        main_basesoc_timer_reload_storage <= builder_csr_bankarray_csrbank3_reload0_r;
    end
    main_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank3_reload0_re;
    if (builder_csr_bankarray_csrbank3_en0_re) begin
        main_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank3_en0_r;
    end
    main_basesoc_timer_en_re <= builder_csr_bankarray_csrbank3_en0_re;
    if (builder_csr_bankarray_csrbank3_update_value0_re) begin
        main_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank3_update_value0_r;
    end
    main_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank3_update_value0_re;
    main_basesoc_timer_value_re <= builder_csr_bankarray_csrbank3_value_re;
    main_basesoc_timer_status_re <= builder_csr_bankarray_csrbank3_ev_status_re;
    if (builder_csr_bankarray_csrbank3_ev_pending_re) begin
        main_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank3_ev_pending_r;
    end
    main_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank3_ev_pending_re;
    if (builder_csr_bankarray_csrbank3_ev_enable0_re) begin
        main_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank3_ev_enable0_r;
    end
    main_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank3_ev_enable0_re;
    builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csr_bankarray_csrbank4_sel) begin
        case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_txfull_w;
            end
            2'd2: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_rxempty_w;
            end
            2'd3: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_status_w;
            end
            3'd4: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd5: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_ev_enable0_w;
            end
            3'd6: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_txempty_w;
            end
            3'd7: begin
                builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_rxfull_w;
            end
        endcase
    end
    main_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank4_txfull_re;
    main_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank4_rxempty_re;
    main_basesoc_uart_status_re <= builder_csr_bankarray_csrbank4_ev_status_re;
    if (builder_csr_bankarray_csrbank4_ev_pending_re) begin
        main_basesoc_uart_pending_r <= builder_csr_bankarray_csrbank4_ev_pending_r;
    end
    main_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank4_ev_pending_re;
    if (builder_csr_bankarray_csrbank4_ev_enable0_re) begin
        main_basesoc_uart_enable_storage <= builder_csr_bankarray_csrbank4_ev_enable0_r;
    end
    main_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank4_ev_enable0_re;
    main_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank4_txempty_re;
    main_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank4_rxfull_re;
    if (sys_rst) begin
        main_basesoc_reset_storage <= 2'd0;
        main_basesoc_reset_re <= 1'd0;
        main_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_scratch_re <= 1'd0;
        main_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_bus_errors <= 32'd0;
        main_basesoc_basesoc_ram_bus_ack <= 1'd0;
        main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
        usb_uart_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_uart_status_re <= 1'd0;
        main_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_timer_load_re <= 1'd0;
        main_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_timer_en_re <= 1'd0;
        main_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_timer_value_status <= 32'd0;
        main_basesoc_timer_value_re <= 1'd0;
        main_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_timer_status_re <= 1'd0;
        main_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_timer_value <= 32'd0;
        main_storage <= 8'd0;
        main_re <= 1'd0;
        main_chaser <= 8'd0;
        main_mode <= 1'd0;
        main_count <= 22'd3125000;
        main_adpll_reset <= 1'd1;
        main_reset_counter <= 11'd0;
        main_cdr_lock_counter <= 11'd0;
        main_cdr_locked <= 1'd0;
        main_tx_enable_storage <= 1'd1;
        main_tx_enable_re <= 1'd0;
        main_rx_enable_storage <= 1'd1;
        main_rx_enable_re <= 1'd0;
        main_tx_ready_re <= 1'd0;
        main_rx_ready_re <= 1'd0;
        main_tx_prbs_config_storage <= 2'd0;
        main_tx_prbs_config_re <= 1'd0;
        main_rx_prbs_config_storage <= 2'd0;
        main_rx_prbs_config_re <= 1'd0;
        main_rx_prbs_pause_storage <= 1'd0;
        main_rx_prbs_pause_re <= 1'd0;
        main_rx_prbs_errors_re <= 1'd0;
        builder_grant <= 1'd0;
        builder_slaves <= 3'd0;
        builder_count <= 20'd1000000;
        builder_csr_bankarray_sel_r <= 1'd0;
        builder_rs232phytx_state <= 1'd0;
        builder_rs232phyrx_state <= 1'd0;
        builder_state <= 1'd0;
    end
    builder_multiregimpl0_regs0 <= usb_uart_rx;
    builder_multiregimpl0_regs1 <= builder_multiregimpl0_regs0;
    builder_multiregimpl6_regs0 <= main_prbsrx_errors;
    builder_multiregimpl6_regs1 <= builder_multiregimpl6_regs0;
end

always @(posedge tx_clk) begin
    main_tx_half_toggle <= (~main_tx_half_toggle);
    if (main_ce0) begin
        main_singleencoder0_disp_in <= main_singleencoder1_disp_out;
    end
    if (main_ce0) begin
        main_output0 <= main_singleencoder0_output;
        main_disparity0 <= main_singleencoder0_disp_out;
    end
    if (main_ce0) begin
        main_output1 <= main_singleencoder1_output;
        main_disparity1 <= main_singleencoder1_disp_out;
    end
    if (main_ce1) begin
        if ((main_singleencoder0_k & (main_singleencoder0_d[4:0] == 5'd28))) begin
            main_singleencoder0_code6b <= 6'd48;
            main_singleencoder0_code6b_unbalanced <= 1'd1;
            main_singleencoder0_code6b_flip <= 1'd1;
        end else begin
            main_singleencoder0_code6b <= builder_f_self0;
            main_singleencoder0_code6b_unbalanced <= builder_f_self1;
            main_singleencoder0_code6b_flip <= builder_f_self2;
        end
        main_singleencoder0_code4b <= builder_rhs_self0;
        main_singleencoder0_code4b_unbalanced <= builder_rhs_self1;
        if (main_singleencoder0_k) begin
            main_singleencoder0_code4b_flip <= 1'd1;
        end else begin
            main_singleencoder0_code4b_flip <= builder_f_self3;
        end
        main_singleencoder0_alt7_rd0 <= 1'd0;
        main_singleencoder0_alt7_rd1 <= 1'd0;
        if ((main_singleencoder0_d[7:5] == 3'd7)) begin
            if ((((main_singleencoder0_d[4:0] == 5'd17) | (main_singleencoder0_d[4:0] == 5'd18)) | (main_singleencoder0_d[4:0] == 5'd20))) begin
                main_singleencoder0_alt7_rd0 <= 1'd1;
            end
            if ((((main_singleencoder0_d[4:0] == 4'd11) | (main_singleencoder0_d[4:0] == 4'd13)) | (main_singleencoder0_d[4:0] == 4'd14))) begin
                main_singleencoder0_alt7_rd1 <= 1'd1;
            end
            if (main_singleencoder0_k) begin
                main_singleencoder0_alt7_rd0 <= 1'd1;
                main_singleencoder0_alt7_rd1 <= 1'd1;
            end
        end
    end
    if (main_ce2) begin
        if ((main_singleencoder1_k & (main_singleencoder1_d[4:0] == 5'd28))) begin
            main_singleencoder1_code6b <= 6'd48;
            main_singleencoder1_code6b_unbalanced <= 1'd1;
            main_singleencoder1_code6b_flip <= 1'd1;
        end else begin
            main_singleencoder1_code6b <= builder_f_self4;
            main_singleencoder1_code6b_unbalanced <= builder_f_self5;
            main_singleencoder1_code6b_flip <= builder_f_self6;
        end
        main_singleencoder1_code4b <= builder_rhs_self2;
        main_singleencoder1_code4b_unbalanced <= builder_rhs_self3;
        if (main_singleencoder1_k) begin
            main_singleencoder1_code4b_flip <= 1'd1;
        end else begin
            main_singleencoder1_code4b_flip <= builder_f_self7;
        end
        main_singleencoder1_alt7_rd0 <= 1'd0;
        main_singleencoder1_alt7_rd1 <= 1'd0;
        if ((main_singleencoder1_d[7:5] == 3'd7)) begin
            if ((((main_singleencoder1_d[4:0] == 5'd17) | (main_singleencoder1_d[4:0] == 5'd18)) | (main_singleencoder1_d[4:0] == 5'd20))) begin
                main_singleencoder1_alt7_rd0 <= 1'd1;
            end
            if ((((main_singleencoder1_d[4:0] == 4'd11) | (main_singleencoder1_d[4:0] == 4'd13)) | (main_singleencoder1_d[4:0] == 4'd14))) begin
                main_singleencoder1_alt7_rd1 <= 1'd1;
            end
            if (main_singleencoder1_k) begin
                main_singleencoder1_alt7_rd0 <= 1'd1;
                main_singleencoder1_alt7_rd1 <= 1'd1;
            end
        end
    end
    main_prbstx_prbs7_n_out <= {(((main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]) ^ (main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6])) ^ ((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0])), (((main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4]) ^ (main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5])) ^ ((main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]) ^ (main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]))), (((main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3]) ^ (main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4])) ^ ((main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4]) ^ (main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]))), (((main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2]) ^ (main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3])) ^ ((main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3]) ^ (main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4]))), (((main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1]) ^ (main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2])) ^ ((main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2]) ^ (main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3]))), ((((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0]) ^ (main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1])) ^ ((main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1]) ^ (main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2]))), ((((main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]) ^ (main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6])) ^ ((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0])) ^ (((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0]) ^ (main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1])))};
    main_prbstx_prbs7_o <= {(main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]), (main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]), (main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4]), (main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3]), (main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2]), (main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1]), ((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0]), ((main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]) ^ (main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6])), ((main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4]) ^ (main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5])), ((main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3]) ^ (main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4])), ((main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2]) ^ (main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3])), ((main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1]) ^ (main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2])), (((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0]) ^ (main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1])), (((main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]) ^ (main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6])) ^ ((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0])), (((main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4]) ^ (main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5])) ^ ((main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]) ^ (main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]))), (((main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3]) ^ (main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4])) ^ ((main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4]) ^ (main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]))), (((main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2]) ^ (main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3])) ^ ((main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3]) ^ (main_prbstx_prbs7_n_out[3] ^ main_prbstx_prbs7_n_out[4]))), (((main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1]) ^ (main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2])) ^ ((main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2]) ^ (main_prbstx_prbs7_n_out[2] ^ main_prbstx_prbs7_n_out[3]))), ((((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0]) ^ (main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1])) ^ ((main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1]) ^ (main_prbstx_prbs7_n_out[1] ^ main_prbstx_prbs7_n_out[2]))), ((((main_prbstx_prbs7_n_out[4] ^ main_prbstx_prbs7_n_out[5]) ^ (main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6])) ^ ((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0])) ^ (((main_prbstx_prbs7_n_out[5] ^ main_prbstx_prbs7_n_out[6]) ^ main_prbstx_prbs7_n_out[0]) ^ (main_prbstx_prbs7_n_out[0] ^ main_prbstx_prbs7_n_out[1])))};
    main_prbstx_prbs15_n_out <= {(main_prbstx_prbs15_n_out[8] ^ main_prbstx_prbs15_n_out[9]), (main_prbstx_prbs15_n_out[7] ^ main_prbstx_prbs15_n_out[8]), (main_prbstx_prbs15_n_out[6] ^ main_prbstx_prbs15_n_out[7]), (main_prbstx_prbs15_n_out[5] ^ main_prbstx_prbs15_n_out[6]), (main_prbstx_prbs15_n_out[4] ^ main_prbstx_prbs15_n_out[5]), (main_prbstx_prbs15_n_out[3] ^ main_prbstx_prbs15_n_out[4]), (main_prbstx_prbs15_n_out[2] ^ main_prbstx_prbs15_n_out[3]), (main_prbstx_prbs15_n_out[1] ^ main_prbstx_prbs15_n_out[2]), (main_prbstx_prbs15_n_out[0] ^ main_prbstx_prbs15_n_out[1]), ((main_prbstx_prbs15_n_out[13] ^ main_prbstx_prbs15_n_out[14]) ^ main_prbstx_prbs15_n_out[0]), ((main_prbstx_prbs15_n_out[12] ^ main_prbstx_prbs15_n_out[13]) ^ (main_prbstx_prbs15_n_out[13] ^ main_prbstx_prbs15_n_out[14])), ((main_prbstx_prbs15_n_out[11] ^ main_prbstx_prbs15_n_out[12]) ^ (main_prbstx_prbs15_n_out[12] ^ main_prbstx_prbs15_n_out[13])), ((main_prbstx_prbs15_n_out[10] ^ main_prbstx_prbs15_n_out[11]) ^ (main_prbstx_prbs15_n_out[11] ^ main_prbstx_prbs15_n_out[12])), ((main_prbstx_prbs15_n_out[9] ^ main_prbstx_prbs15_n_out[10]) ^ (main_prbstx_prbs15_n_out[10] ^ main_prbstx_prbs15_n_out[11])), ((main_prbstx_prbs15_n_out[8] ^ main_prbstx_prbs15_n_out[9]) ^ (main_prbstx_prbs15_n_out[9] ^ main_prbstx_prbs15_n_out[10]))};
    main_prbstx_prbs15_o <= {(main_prbstx_prbs15_n_out[13] ^ main_prbstx_prbs15_n_out[14]), (main_prbstx_prbs15_n_out[12] ^ main_prbstx_prbs15_n_out[13]), (main_prbstx_prbs15_n_out[11] ^ main_prbstx_prbs15_n_out[12]), (main_prbstx_prbs15_n_out[10] ^ main_prbstx_prbs15_n_out[11]), (main_prbstx_prbs15_n_out[9] ^ main_prbstx_prbs15_n_out[10]), (main_prbstx_prbs15_n_out[8] ^ main_prbstx_prbs15_n_out[9]), (main_prbstx_prbs15_n_out[7] ^ main_prbstx_prbs15_n_out[8]), (main_prbstx_prbs15_n_out[6] ^ main_prbstx_prbs15_n_out[7]), (main_prbstx_prbs15_n_out[5] ^ main_prbstx_prbs15_n_out[6]), (main_prbstx_prbs15_n_out[4] ^ main_prbstx_prbs15_n_out[5]), (main_prbstx_prbs15_n_out[3] ^ main_prbstx_prbs15_n_out[4]), (main_prbstx_prbs15_n_out[2] ^ main_prbstx_prbs15_n_out[3]), (main_prbstx_prbs15_n_out[1] ^ main_prbstx_prbs15_n_out[2]), (main_prbstx_prbs15_n_out[0] ^ main_prbstx_prbs15_n_out[1]), ((main_prbstx_prbs15_n_out[13] ^ main_prbstx_prbs15_n_out[14]) ^ main_prbstx_prbs15_n_out[0]), ((main_prbstx_prbs15_n_out[12] ^ main_prbstx_prbs15_n_out[13]) ^ (main_prbstx_prbs15_n_out[13] ^ main_prbstx_prbs15_n_out[14])), ((main_prbstx_prbs15_n_out[11] ^ main_prbstx_prbs15_n_out[12]) ^ (main_prbstx_prbs15_n_out[12] ^ main_prbstx_prbs15_n_out[13])), ((main_prbstx_prbs15_n_out[10] ^ main_prbstx_prbs15_n_out[11]) ^ (main_prbstx_prbs15_n_out[11] ^ main_prbstx_prbs15_n_out[12])), ((main_prbstx_prbs15_n_out[9] ^ main_prbstx_prbs15_n_out[10]) ^ (main_prbstx_prbs15_n_out[10] ^ main_prbstx_prbs15_n_out[11])), ((main_prbstx_prbs15_n_out[8] ^ main_prbstx_prbs15_n_out[9]) ^ (main_prbstx_prbs15_n_out[9] ^ main_prbstx_prbs15_n_out[10]))};
    main_prbstx_prbs31_n_out <= {main_prbstx_prbs31_n_out[10], main_prbstx_prbs31_n_out[9], main_prbstx_prbs31_n_out[8], main_prbstx_prbs31_n_out[7], main_prbstx_prbs31_n_out[6], main_prbstx_prbs31_n_out[5], main_prbstx_prbs31_n_out[4], main_prbstx_prbs31_n_out[3], main_prbstx_prbs31_n_out[2], main_prbstx_prbs31_n_out[1], main_prbstx_prbs31_n_out[0], (main_prbstx_prbs31_n_out[27] ^ main_prbstx_prbs31_n_out[30]), (main_prbstx_prbs31_n_out[26] ^ main_prbstx_prbs31_n_out[29]), (main_prbstx_prbs31_n_out[25] ^ main_prbstx_prbs31_n_out[28]), (main_prbstx_prbs31_n_out[24] ^ main_prbstx_prbs31_n_out[27]), (main_prbstx_prbs31_n_out[23] ^ main_prbstx_prbs31_n_out[26]), (main_prbstx_prbs31_n_out[22] ^ main_prbstx_prbs31_n_out[25]), (main_prbstx_prbs31_n_out[21] ^ main_prbstx_prbs31_n_out[24]), (main_prbstx_prbs31_n_out[20] ^ main_prbstx_prbs31_n_out[23]), (main_prbstx_prbs31_n_out[19] ^ main_prbstx_prbs31_n_out[22]), (main_prbstx_prbs31_n_out[18] ^ main_prbstx_prbs31_n_out[21]), (main_prbstx_prbs31_n_out[17] ^ main_prbstx_prbs31_n_out[20]), (main_prbstx_prbs31_n_out[16] ^ main_prbstx_prbs31_n_out[19]), (main_prbstx_prbs31_n_out[15] ^ main_prbstx_prbs31_n_out[18]), (main_prbstx_prbs31_n_out[14] ^ main_prbstx_prbs31_n_out[17]), (main_prbstx_prbs31_n_out[13] ^ main_prbstx_prbs31_n_out[16]), (main_prbstx_prbs31_n_out[12] ^ main_prbstx_prbs31_n_out[15]), (main_prbstx_prbs31_n_out[11] ^ main_prbstx_prbs31_n_out[14]), (main_prbstx_prbs31_n_out[10] ^ main_prbstx_prbs31_n_out[13]), (main_prbstx_prbs31_n_out[9] ^ main_prbstx_prbs31_n_out[12]), (main_prbstx_prbs31_n_out[8] ^ main_prbstx_prbs31_n_out[11])};
    main_prbstx_prbs31_o <= {main_prbstx_prbs31_n_out[10], main_prbstx_prbs31_n_out[9], main_prbstx_prbs31_n_out[8], main_prbstx_prbs31_n_out[7], main_prbstx_prbs31_n_out[6], main_prbstx_prbs31_n_out[5], main_prbstx_prbs31_n_out[4], main_prbstx_prbs31_n_out[3], main_prbstx_prbs31_n_out[2], main_prbstx_prbs31_n_out[1], main_prbstx_prbs31_n_out[0], (main_prbstx_prbs31_n_out[27] ^ main_prbstx_prbs31_n_out[30]), (main_prbstx_prbs31_n_out[26] ^ main_prbstx_prbs31_n_out[29]), (main_prbstx_prbs31_n_out[25] ^ main_prbstx_prbs31_n_out[28]), (main_prbstx_prbs31_n_out[24] ^ main_prbstx_prbs31_n_out[27]), (main_prbstx_prbs31_n_out[23] ^ main_prbstx_prbs31_n_out[26]), (main_prbstx_prbs31_n_out[22] ^ main_prbstx_prbs31_n_out[25]), (main_prbstx_prbs31_n_out[21] ^ main_prbstx_prbs31_n_out[24]), (main_prbstx_prbs31_n_out[20] ^ main_prbstx_prbs31_n_out[23]), (main_prbstx_prbs31_n_out[19] ^ main_prbstx_prbs31_n_out[22]), (main_prbstx_prbs31_n_out[18] ^ main_prbstx_prbs31_n_out[21]), (main_prbstx_prbs31_n_out[17] ^ main_prbstx_prbs31_n_out[20]), (main_prbstx_prbs31_n_out[16] ^ main_prbstx_prbs31_n_out[19]), (main_prbstx_prbs31_n_out[15] ^ main_prbstx_prbs31_n_out[18]), (main_prbstx_prbs31_n_out[14] ^ main_prbstx_prbs31_n_out[17]), (main_prbstx_prbs31_n_out[13] ^ main_prbstx_prbs31_n_out[16]), (main_prbstx_prbs31_n_out[12] ^ main_prbstx_prbs31_n_out[15]), (main_prbstx_prbs31_n_out[11] ^ main_prbstx_prbs31_n_out[14]), (main_prbstx_prbs31_n_out[10] ^ main_prbstx_prbs31_n_out[13]), (main_prbstx_prbs31_n_out[9] ^ main_prbstx_prbs31_n_out[12]), (main_prbstx_prbs31_n_out[8] ^ main_prbstx_prbs31_n_out[11])};
    if (tx_rst) begin
        main_disparity0 <= 1'd0;
        main_disparity1 <= 1'd0;
        main_singleencoder0_disp_in <= 1'd0;
        main_singleencoder0_code6b_flip <= 1'd0;
        main_singleencoder0_code4b_flip <= 1'd0;
        main_singleencoder1_code6b_flip <= 1'd0;
        main_singleencoder1_code4b_flip <= 1'd0;
        main_prbstx_prbs7_o <= 20'd0;
        main_prbstx_prbs7_n_out <= 7'd1;
        main_prbstx_prbs15_o <= 20'd0;
        main_prbstx_prbs15_n_out <= 15'd1;
        main_prbstx_prbs31_o <= 20'd0;
        main_prbstx_prbs31_n_out <= 31'd1;
        main_tx_half_toggle <= 1'd0;
    end
    builder_multiregimpl1_regs0 <= main_prbstx_config0;
    builder_multiregimpl1_regs1 <= builder_multiregimpl1_regs0;
    builder_multiregimpl3_regs0 <= main_tx_prbs_config0;
    builder_multiregimpl3_regs1 <= builder_multiregimpl3_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance CC_USR_RSTN of CC_USR_RSTN Module.
//------------------------------------------------------------------------------
CC_USR_RSTN CC_USR_RSTN(
	// Outputs.
	.USR_RSTN (main_crg_rst_n)
);

//------------------------------------------------------------------------------
// Memory rom: 6052-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6051];
initial begin
	$readmemh("colognechip_gatemate_evb_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_basesoc_adr];
end
assign main_basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("colognechip_gatemate_evb_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_ram_we[0])
		sram[main_basesoc_ram_adr][7:0] <= main_basesoc_ram_dat_w[7:0];
	if (main_basesoc_ram_we[1])
		sram[main_basesoc_ram_adr][15:8] <= main_basesoc_ram_dat_w[15:8];
	if (main_basesoc_ram_we[2])
		sram[main_basesoc_ram_adr][23:16] <= main_basesoc_ram_dat_w[23:16];
	if (main_basesoc_ram_we[3])
		sram[main_basesoc_ram_adr][31:24] <= main_basesoc_ram_dat_w[31:24];
	sram_adr0 <= main_basesoc_ram_adr;
end
assign main_basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 46-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:45];
initial begin
	$readmemh("colognechip_gatemate_evb_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance CC_BUFG of CC_BUFG Module.
//------------------------------------------------------------------------------
CC_BUFG CC_BUFG(
	// Inputs.
	.I (main_txoutclk),

	// Outputs.
	.O (tx_clk)
);

//------------------------------------------------------------------------------
// Instance CC_BUFG_1 of CC_BUFG Module.
//------------------------------------------------------------------------------
CC_BUFG CC_BUFG_1(
	// Inputs.
	.I (main_rxoutclk),

	// Outputs.
	.O (rx_clk)
);

//------------------------------------------------------------------------------
// Instance CC_BUFG_2 of CC_BUFG Module.
//------------------------------------------------------------------------------
CC_BUFG CC_BUFG_2(
	// Inputs.
	.I (main_tx_half_clk),

	// Outputs.
	.O (tx_half_clk)
);

//------------------------------------------------------------------------------
// Instance CC_SERDES of CC_SERDES Module.
//------------------------------------------------------------------------------
CC_SERDES #(
	// Parameters.
	.PLL_AO                   (1'd0),
	.PLL_BISC_CAL_AUTO        (1'd1),
	.PLL_BISC_CAL_SIGN        (1'd0),
	.PLL_BISC_COR_DLY         (1'd1),
	.PLL_BISC_CP_MAX          (5'd18),
	.PLL_BISC_CP_MIN          (3'd4),
	.PLL_BISC_CP_START        (4'd12),
	.PLL_BISC_DLY_DIR         (1'd0),
	.PLL_BISC_DLY_PFD_MON_DIV (2'd2),
	.PLL_BISC_DLY_PFD_MON_REF (1'd0),
	.PLL_BISC_MODE            (3'd5),
	.PLL_BISC_OPT_DET_IND     (1'd0),
	.PLL_BISC_PFD_SEL         (1'd0),
	.PLL_BISC_TIMER_MAX       (4'd15),
	.PLL_CI                   (2'd3),
	.PLL_CONFIG_SEL           (1'd1),
	.PLL_CP                   (7'd80),
	.PLL_EN_ADPLL_CTRL        (1'd1),
	.PLL_FCNTRL               (5'd26),
	.PLL_FILTER_SHIFT         (2'd2),
	.PLL_FT                   (10'd512),
	.PLL_MAIN_DIVSEL          (5'd26),
	.PLL_OPEN_LOOP            (1'd0),
	.PLL_OUT_DIVSEL           (2'd3),
	.PLL_REF_BYPASS           (1'd0),
	.PLL_REF_RTERM            (1'd1),
	.PLL_REF_SEL              (1'd1),
	.PLL_SAR_LIMIT            (2'd2),
	.PLL_SCAP                 (1'd0),
	.PLL_SCAP_AUTO_CAL        (1'd1),
	.RX_8B10B_BYPASS          (1'd0),
	.RX_8B10B_EN              (1'd0),
	.RX_8B10B_EN_OVR          (1'd0),
	.RX_AFE_GAIN              (4'd8),
	.RX_AFE_OFFSET            (4'd8),
	.RX_AFE_PEAK              (4'd15),
	.RX_AFE_VCMSEL            (3'd4),
	.RX_ALIGN_COMMA_ENABLE    (10'd1023),
	.RX_ALIGN_COMMA_WORD      (1'd1),
	.RX_ALIGN_MCOMMA_VALUE    (10'd643),
	.RX_ALIGN_PCOMMA_VALUE    (9'd380),
	.RX_BYTE_REALIGN          (1'd1),
	.RX_CALIB_EN              (1'd1),
	.RX_CALIB_OVR             (1'd0),
	.RX_CALIB_VAL             (1'd0),
	.RX_CDR_CKI               (1'd0),
	.RX_CDR_CKP               (8'd248),
	.RX_CDR_FORCE_LOCK        (1'd1),
	.RX_CDR_FREQ_ACC          (1'd0),
	.RX_CDR_LOCK_CFG          (4'd11),
	.RX_CDR_PHASE_ACC         (1'd0),
	.RX_CDR_RESET             (1'd0),
	.RX_CDR_RESET_OVR         (1'd0),
	.RX_CDR_RESET_TIME        (2'd3),
	.RX_CDR_SET_ACC_CONFIG    (1'd0),
	.RX_CDR_TRANS_TH          (8'd128),
	.RX_CLKCOR_MAX_LAT        (6'd39),
	.RX_CLKCOR_MIN_LAT        (6'd32),
	.RX_CLKCOR_SEQ_1_0        (9'd503),
	.RX_CLKCOR_SEQ_1_1        (9'd503),
	.RX_CLKCOR_SEQ_1_2        (9'd503),
	.RX_CLKCOR_SEQ_1_3        (9'd503),
	.RX_CLKCOR_USE            (1'd0),
	.RX_COMMA_DETECT_EN       (1'd0),
	.RX_COMMA_DETECT_EN_OVR   (1'd0),
	.RX_DATAPATH_SEL          (1'd0),
	.RX_EI_BIAS               (3'd4),
	.RX_EI_BW_SEL             (3'd4),
	.RX_EN_EI_DETECTOR        (1'd0),
	.RX_EN_EI_DETECTOR_OVR    (1'd0),
	.RX_EN_EQA                (1'd0),
	.RX_EQA_CKP_HF            (8'd163),
	.RX_EQA_CKP_LF            (8'd163),
	.RX_EQA_CKP_OFFSET        (1'd1),
	.RX_EQA_CONFIG            (9'd448),
	.RX_EQA_LOCK_CFG          (1'd0),
	.RX_EQA_RESET             (1'd0),
	.RX_EQA_RESET_OVR         (1'd0),
	.RX_EQA_RESET_TIME        (2'd3),
	.RX_MCOMMA_ALIGN          (1'd0),
	.RX_MCOMMA_ALIGN_OVR      (1'd0),
	.RX_MON_PH_OFFSET         (1'd0),
	.RX_PCOMMA_ALIGN          (1'd0),
	.RX_PCOMMA_ALIGN_OVR      (1'd0),
	.RX_PCS_LOOPBACK          (1'd0),
	.RX_PCS_RESET_TIME        (2'd3),
	.RX_PMA_LOOPBACK          (1'd0),
	.RX_PMA_RESET_TIME        (2'd3),
	.RX_POLARITY              (1'd0),
	.RX_POLARITY_OVR          (1'd0),
	.RX_POWER_DOWN_N          (1'd1),
	.RX_POWER_DOWN_OVR        (1'd0),
	.RX_PRBS_CNT_RESET        (1'd0),
	.RX_PRBS_OVR              (1'd0),
	.RX_PRBS_SEL              (1'd0),
	.RX_RESET_DONE_GATE       (1'd0),
	.RX_RESET_TIMER_PRESC     (1'd0),
	.RX_RTERM_PD              (1'd0),
	.RX_RTERM_VCMSEL          (3'd4),
	.RX_SLIDE                 (1'd0),
	.RX_SLIDE_MODE            (1'd0),
	.RX_TAPW                  (4'd8),
	.RX_TH_MON1               (4'd8),
	.RX_TH_MON2               (4'd8),
	.RX_WAIT_CDR_LOCK         (1'd0),
	.SERDES_AUTO_INIT         (1'd0),
	.SERDES_ENABLE            (1'd1),
	.SERDES_TESTMODE          (1'd1),
	.TX_8B10B_EN              (1'd0),
	.TX_8B10B_EN_OVR          (1'd0),
	.TX_DATAPATH_SEL          (1'd0),
	.TX_ELEC_IDLE             (1'd0),
	.TX_ELEC_IDLE_OVR         (1'd0),
	.TX_PCS_LOOPBACK          (1'd0),
	.TX_PCS_RESET_TIME        (2'd3),
	.TX_PMA_LOOPBACK          (1'd0),
	.TX_PMA_RESET_TIME        (2'd3),
	.TX_POLARITY              (1'd0),
	.TX_POLARITY_OVR          (1'd0),
	.TX_POWER_DOWN_N          (1'd1),
	.TX_POWER_DOWN_OVR        (1'd0),
	.TX_PRBS_FORCE_ERR        (1'd0),
	.TX_PRBS_OVR              (1'd0),
	.TX_PRBS_SEL              (1'd0)
) CC_SERDES (
	// Inputs.
	.LOOPBACK_I           (2'd2),
	.REGFILE_ADDR_I       (1'd0),
	.REGFILE_CLK_I        (1'd0),
	.REGFILE_DI_I         (1'd0),
	.REGFILE_EN_I         (1'd0),
	.REGFILE_MASK_I       (1'd0),
	.REGFILE_WE_I         (1'd0),
	.RX_BUF_RESET_I       (1'd0),
	.RX_CDR_RESET_I       (1'd0),
	.RX_CLK_I             (rx_clk),
	.RX_COMMA_DETECT_EN_I (1'd0),
	.RX_EN_EI_DETECTOR_I  (1'd0),
	.RX_MCOMMA_ALIGN_I    (1'd0),
	.RX_PCOMMA_ALIGN_I    (1'd0),
	.RX_PCS_RESET_I       (1'd0),
	.RX_PMA_RESET_I       (1'd0),
	.RX_POLARITY_I        (1'd0),
	.RX_RESET_I           (main_rx_reset),
	.RX_SLIDE_I           (1'd0),
	.TX_CHAR_DISPMODE_I   ({main_tx_bus[23], main_tx_bus[9]}),
	.TX_CHAR_DISPVAL_I    ({main_tx_bus[22], main_tx_bus[8]}),
	.TX_CHAR_IS_K_I       (1'd0),
	.TX_CLK_I             (tx_half_clk),
	.TX_DATA_I            ({main_tx_bus[17:10], main_tx_bus[7:0]}),
	.TX_DETECT_RX_I       (1'd1),
	.TX_ELEC_IDLE_I       (1'd0),
	.TX_PCS_RESET_I       (1'd0),
	.TX_PMA_RESET_I       (1'd0),
	.TX_POLARITY_I        (1'd0),
	.TX_POWER_DOWN_N_I    (1'd1),
	.TX_RESET_I           (main_tx_reset),

	// Outputs.
	.PLL_CLK_O            (main_txoutclk),
	.RX_CHAR_IS_K_O       ({main_rx_bus[18], main_rx_bus[8]}),
	.RX_CLK_O             (main_rxoutclk),
	.RX_DATA_O            ({main_rx_bus[17:10], main_rx_bus[7:0]}),
	.RX_DISP_ERR_O        ({main_rx_bus[19], main_rx_bus[9]}),
	.RX_RESET_DONE_O      (main_rx_reset_done),
	.TX_RESET_DONE_O      (main_tx_reset_done)
);

//------------------------------------------------------------------------------
// Instance CC_PLL of CC_PLL Module.
//------------------------------------------------------------------------------
CC_PLL #(
	// Parameters.
	.CI_FILTER_CONST (2'd2),
	.CLK180_DOUB     (1'd0),
	.CLK270_DOUB     (1'd0),
	.CP_FILTER_CONST (3'd4),
	.LOCK_REQ        (1'd1),
	.LOW_JITTER      (1'd1),
	.OUT_CLK         ("50.0"),
	.PERF_MD         ("ECONOMY"),
	.REF_CLK         ("10.0")
) CC_PLL (
	// Inputs.
	.CLK_FEEDBACK        (1'd0),
	.CLK_REF             (main_crg_clkin),
	.USR_CLK_REF         (builder_gatematepll3),
	.USR_LOCKED_STDY_RST (1'd0),

	// Outputs.
	.CLK0                (main_crg_clkout),
	.CLK180              (builder_gatematepll1),
	.CLK270              (builder_gatematepll2),
	.CLK90               (builder_gatematepll0),
	.CLK_REF_OUT         (builder_gatematepll4),
	.USR_PLL_LOCKED      (builder_gatematepll_locked_s1),
	.USR_PLL_LOCKED_STDY (builder_gatematepll5)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (main_basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (main_basesoc_dbus_dat_r),
	.dBusWishbone_ERR       (main_basesoc_dbus_err),
	.externalInterruptArray (main_basesoc_interrupt),
	.externalResetVector    (main_basesoc_vexriscv),
	.iBusWishbone_ACK       (main_basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (main_basesoc_ibus_dat_r),
	.iBusWishbone_ERR       (main_basesoc_ibus_err),
	.reset                  ((sys_rst | main_basesoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (main_basesoc_dbus_adr),
	.dBusWishbone_BTE       (main_basesoc_dbus_bte),
	.dBusWishbone_CTI       (main_basesoc_dbus_cti),
	.dBusWishbone_CYC       (main_basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (main_basesoc_dbus_dat_w),
	.dBusWishbone_SEL       (main_basesoc_dbus_sel),
	.dBusWishbone_STB       (main_basesoc_dbus_stb),
	.dBusWishbone_WE        (main_basesoc_dbus_we),
	.iBusWishbone_ADR       (main_basesoc_ibus_adr),
	.iBusWishbone_BTE       (main_basesoc_ibus_bte),
	.iBusWishbone_CTI       (main_basesoc_ibus_cti),
	.iBusWishbone_CYC       (main_basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (main_basesoc_ibus_dat_w),
	.iBusWishbone_SEL       (main_basesoc_ibus_sel),
	.iBusWishbone_STB       (main_basesoc_ibus_stb),
	.iBusWishbone_WE        (main_basesoc_ibus_we)
);

//------------------------------------------------------------------------------
// Instance CC_DFF of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF (
	// Inputs.
	.CLK (sys_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (builder_rst10)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_1 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_1 (
	// Inputs.
	.CLK (sys_clk),
	.D   (builder_rst10),
	.EN  (1'd1),
	.SR  ((~main_crg_locked)),

	// Outputs.
	.Q   (sys_rst)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_2 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_2 (
	// Inputs.
	.CLK (rx_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_cdr_locked)),

	// Outputs.
	.Q   (builder_rst11)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_3 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_3 (
	// Inputs.
	.CLK (rx_clk),
	.D   (builder_rst11),
	.EN  (1'd1),
	.SR  ((~main_cdr_locked)),

	// Outputs.
	.Q   (rx_rst)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_4 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_4 (
	// Inputs.
	.CLK (tx_clk),
	.D   (1'd0),
	.EN  (1'd1),
	.SR  ((~main_tx_reset_done)),

	// Outputs.
	.Q   (builder_rst12)
);

//------------------------------------------------------------------------------
// Instance CC_DFF_5 of CC_DFF Module.
//------------------------------------------------------------------------------
CC_DFF #(
	// Parameters.
	.CLK_INV (1'd0),
	.EN_INV  (1'd0),
	.SR_INV  (1'd0),
	.SR_VAL  (1'd1)
) CC_DFF_5 (
	// Inputs.
	.CLK (tx_clk),
	.D   (builder_rst12),
	.EN  (1'd1),
	.SR  ((~main_tx_reset_done)),

	// Outputs.
	.Q   (tx_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-07-20 17:42:10.
//------------------------------------------------------------------------------
