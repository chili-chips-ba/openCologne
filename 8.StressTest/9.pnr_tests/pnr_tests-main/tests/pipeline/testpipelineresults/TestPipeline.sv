// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module ram_64x32(	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  input  [5:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [5:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:63];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  always @(posedge W0_clk) begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    if (W0_en & 1'h1)	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      Memory[W0_addr] <= W0_data;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    reg [31:0] _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        for (logic [6:0] i = 7'h0; i < 7'h40; i += 7'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
          Memory[i[5:0]] = _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        end	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
endmodule

module Queue64_UInt32(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input         clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
                reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  output        io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [31:0] io_enq_bits,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output        io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [31:0] io_deq_bits	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  reg  [5:0] enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [5:0] deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg        maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  wire       ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:260:33
  wire       empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :261:{25,28}
  wire       full = ptr_match & maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :262:24
  wire       do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :262:24, :286:19
  wire       do_deq = io_deq_ready & ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :261:25, :285:19
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    if (reset) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      enq_ptr_value <= 6'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 6'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    end
    else begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      if (do_enq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        enq_ptr_value <= enq_ptr_value + 6'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (do_deq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        deq_ptr_value <= deq_ptr_value + 6'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][5:0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][11:6];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][12];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_64x32 ram_ext (	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    .R0_addr (deq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .R0_en   (1'h1),	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :262:24, :286:19
  assign io_deq_valid = ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :261:25, :285:19
endmodule

module NodeQueue(	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:6:7
  input         clock,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:6:7
                reset,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:6:7
  output        in_ready,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:8:14
  input         in_valid,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:8:14
  input  [31:0] in_bits,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:8:14
  output [31:0] out_bits	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:9:15
);

  wire        _Queue64_UInt32_3_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire        _Queue64_UInt32_2_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire        _Queue64_UInt32_2_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [31:0] _Queue64_UInt32_2_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire        _Queue64_UInt32_1_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire        _Queue64_UInt32_1_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [31:0] _Queue64_UInt32_1_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire        _Queue64_UInt32_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [31:0] _Queue64_UInt32_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  Queue64_UInt32 Queue64_UInt32 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (in_ready),
    .io_enq_valid (in_valid & in_bits[0]),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:15:{38,48}
    .io_enq_bits  (in_bits),
    .io_deq_ready (_Queue64_UInt32_1_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt32_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt32_io_deq_bits)
  );
  Queue64_UInt32 Queue64_UInt32_1 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt32_1_io_enq_ready),
    .io_enq_valid (_Queue64_UInt32_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt32_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (_Queue64_UInt32_2_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt32_1_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt32_1_io_deq_bits)
  );
  Queue64_UInt32 Queue64_UInt32_2 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt32_2_io_enq_ready),
    .io_enq_valid (_Queue64_UInt32_1_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt32_1_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (_Queue64_UInt32_3_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt32_2_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt32_2_io_deq_bits)
  );
  Queue64_UInt32 Queue64_UInt32_3 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt32_3_io_enq_ready),
    .io_enq_valid (_Queue64_UInt32_2_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt32_2_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (1'h1),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:9:15, :12:44
    .io_deq_valid (/* unused */),
    .io_deq_bits  (out_bits)
  );
endmodule

module NodeDemux(	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/mux/NodeDemux.scala:6:7
  input  [31:0]  in_bits,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/mux/NodeDemux.scala:8:14
  output [127:0] out_bits	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/mux/NodeDemux.scala:9:15
);

  assign out_bits = {64'h0, {2{in_bits}}};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/mux/NodeDemux.scala:6:7, :13:{12,18}
endmodule

module NodeDiv(	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
  input          clock,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
  input  [127:0] in_bits,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:23:14
  output [127:0] out_bits	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:24:15
);

  reg [127:0] in_reg;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:26:19
  reg [127:0] out_reg;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:27:20
  always @(posedge clock) begin	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    in_reg <= in_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:26:19
    out_reg <= {24'h0, in_reg[127:41] / {81'h0, in_reg[5:0]}, in_bits[16:0]};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:26:19, :27:20, :49:25, :56:45, :58:44, :66:32, :68:13
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    `ifdef FIRRTL_BEFORE_INITIAL	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
      `FIRRTL_BEFORE_INITIAL	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:7];	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    initial begin	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
      `ifdef INIT_RANDOM_PROLOG_	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
        `INIT_RANDOM_PROLOG_	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
        for (logic [3:0] i = 4'h0; i < 4'h8; i += 4'h1) begin
          _RANDOM[i[2:0]] = `RANDOM;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
        end	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
        in_reg = {_RANDOM[3'h0], _RANDOM[3'h1], _RANDOM[3'h2], _RANDOM[3'h3]};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7, :26:19
        out_reg = {_RANDOM[3'h4], _RANDOM[3'h5], _RANDOM[3'h6], _RANDOM[3'h7]};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7, :27:20
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
      `FIRRTL_AFTER_INITIAL	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign out_bits = out_reg;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7, :27:20
endmodule

// VCS coverage exclude_file
module ram_64x128(	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  input  [5:0]   R0_addr,
  input          R0_en,
                 R0_clk,
  output [127:0] R0_data,
  input  [5:0]   W0_addr,
  input          W0_en,
                 W0_clk,
  input  [127:0] W0_data
);

  reg [127:0] Memory[0:63];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  always @(posedge W0_clk) begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    if (W0_en & 1'h1)	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      Memory[W0_addr] <= W0_data;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    reg [127:0] _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        for (logic [6:0] i = 7'h0; i < 7'h40; i += 7'h1) begin
          for (logic [7:0] j = 8'h0; j < 8'h80; j += 8'h20) begin
            _RANDOM_MEM[j +: 32] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
          end	// src/main/scala/chisel3/util/Decoupled.scala:256:91
          Memory[i[5:0]] = _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        end	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 128'bx;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
endmodule

module Queue64_UInt128(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input          clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
                 reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  output         io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input          io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [127:0] io_enq_bits,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input          io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output         io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [127:0] io_deq_bits	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  reg  [5:0] enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [5:0] deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg        maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  wire       ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:260:33
  wire       empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :261:{25,28}
  wire       full = ptr_match & maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :262:24
  wire       do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :262:24, :286:19
  wire       do_deq = io_deq_ready & ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :261:25, :285:19
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    if (reset) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      enq_ptr_value <= 6'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 6'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    end
    else begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      if (do_enq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        enq_ptr_value <= enq_ptr_value + 6'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (do_deq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        deq_ptr_value <= deq_ptr_value + 6'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][5:0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][11:6];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][12];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_64x128 ram_ext (	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    .R0_addr (deq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .R0_en   (1'h1),	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :262:24, :286:19
  assign io_deq_valid = ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :261:25, :285:19
endmodule

module NodeQueue_1(	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:6:7
  input          clock,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:6:7
                 reset,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:6:7
  input  [127:0] in_bits,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:8:14
  input          out_ready,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:9:15
  output         out_valid,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:9:15
  output [127:0] out_bits	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:9:15
);

  wire         _Queue64_UInt128_5_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_4_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_4_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [127:0] _Queue64_UInt128_4_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_3_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_3_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [127:0] _Queue64_UInt128_3_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_2_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_2_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [127:0] _Queue64_UInt128_2_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_1_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_1_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [127:0] _Queue64_UInt128_1_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [127:0] _Queue64_UInt128_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  Queue64_UInt128 Queue64_UInt128 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (/* unused */),
    .io_enq_valid (in_bits[0]),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:15:48
    .io_enq_bits  (in_bits),
    .io_deq_ready (_Queue64_UInt128_1_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt128_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt128_io_deq_bits)
  );
  Queue64_UInt128 Queue64_UInt128_1 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt128_1_io_enq_ready),
    .io_enq_valid (_Queue64_UInt128_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt128_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (_Queue64_UInt128_2_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt128_1_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt128_1_io_deq_bits)
  );
  Queue64_UInt128 Queue64_UInt128_2 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt128_2_io_enq_ready),
    .io_enq_valid (_Queue64_UInt128_1_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt128_1_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (_Queue64_UInt128_3_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt128_2_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt128_2_io_deq_bits)
  );
  Queue64_UInt128 Queue64_UInt128_3 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt128_3_io_enq_ready),
    .io_enq_valid (_Queue64_UInt128_2_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt128_2_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (_Queue64_UInt128_4_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt128_3_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt128_3_io_deq_bits)
  );
  Queue64_UInt128 Queue64_UInt128_4 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt128_4_io_enq_ready),
    .io_enq_valid (_Queue64_UInt128_3_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt128_3_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (_Queue64_UInt128_5_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt128_4_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt128_4_io_deq_bits)
  );
  Queue64_UInt128 Queue64_UInt128_5 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt128_5_io_enq_ready),
    .io_enq_valid (_Queue64_UInt128_4_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt128_4_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (out_ready),
    .io_deq_valid (out_valid),
    .io_deq_bits  (out_bits)
  );
endmodule

module NodeQueue_2(	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:6:7
  input          clock,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:6:7
                 reset,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:6:7
  output         in_ready,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:8:14
  input          in_valid,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:8:14
  input  [127:0] in_bits,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:8:14
  output [127:0] out_bits	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:9:15
);

  wire         _Queue64_UInt128_4_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_3_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_3_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [127:0] _Queue64_UInt128_3_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_2_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_2_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [127:0] _Queue64_UInt128_2_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_1_io_enq_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_1_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [127:0] _Queue64_UInt128_1_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire         _Queue64_UInt128_io_deq_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  wire [127:0] _Queue64_UInt128_io_deq_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
  Queue64_UInt128 Queue64_UInt128 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (in_ready),
    .io_enq_valid (in_valid & in_bits[0]),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:15:{38,48}
    .io_enq_bits  (in_bits),
    .io_deq_ready (_Queue64_UInt128_1_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt128_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt128_io_deq_bits)
  );
  Queue64_UInt128 Queue64_UInt128_1 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt128_1_io_enq_ready),
    .io_enq_valid (_Queue64_UInt128_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt128_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (_Queue64_UInt128_2_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt128_1_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt128_1_io_deq_bits)
  );
  Queue64_UInt128 Queue64_UInt128_2 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt128_2_io_enq_ready),
    .io_enq_valid (_Queue64_UInt128_1_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt128_1_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (_Queue64_UInt128_3_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt128_2_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt128_2_io_deq_bits)
  );
  Queue64_UInt128 Queue64_UInt128_3 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt128_3_io_enq_ready),
    .io_enq_valid (_Queue64_UInt128_2_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt128_2_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (_Queue64_UInt128_4_io_enq_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_valid (_Queue64_UInt128_3_io_deq_valid),
    .io_deq_bits  (_Queue64_UInt128_3_io_deq_bits)
  );
  Queue64_UInt128 Queue64_UInt128_4 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_Queue64_UInt128_4_io_enq_ready),
    .io_enq_valid (_Queue64_UInt128_3_io_deq_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_enq_bits  (_Queue64_UInt128_3_io_deq_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:12:44
    .io_deq_ready (1'h1),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/queue/NodeQueue.scala:9:15, :12:44
    .io_deq_valid (/* unused */),
    .io_deq_bits  (out_bits)
  );
endmodule

module NodeMap(	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/decode/NodeMap.scala:7:7
  input  [127:0] in_bits,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/decode/NodeMap.scala:9:14
  output [127:0] out_bits	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/decode/NodeMap.scala:10:15
);

  assign out_bits =
    {in_bits[119:112] == 8'h25
       ? 27'h3D
       : in_bits[119:112] == 8'h40
           ? 27'hB5
           : in_bits[119:112] == 8'h11
               ? 27'h64
               : in_bits[119:112] == 8'hB4
                   ? 27'hBA
                   : in_bits[119:112] == 8'h37
                       ? 27'hB0
                       : in_bits[119:112] == 8'h21
                           ? 27'h59
                           : in_bits[119:112] == 8'hAF
                               ? 27'h5
                               : (&(in_bits[119:112]))
                                   ? 27'h3A
                                   : in_bits[119:112] == 8'hAB
                                       ? 27'hB8
                                       : in_bits[119:112] == 8'h41
                                           ? 27'h5B
                                           : in_bits[26:0],
     in_bits[127:120] == 8'hBD
       ? 49'h4D
       : in_bits[127:120] == 8'h6C
           ? 49'hA0
           : in_bits[127:120] == 8'h59
               ? 49'h45
               : in_bits[127:120] == 8'h67
                   ? 49'hAC
                   : in_bits[127:120] == 8'hAB
                       ? 49'hA0
                       : in_bits[127:120] == 8'hC7
                           ? 49'hC
                           : in_bits[127:120] == 8'h1A
                               ? 49'h89
                               : in_bits[127:120] == 8'h1
                                   ? 49'hA7
                                   : in_bits[127:120] == 8'h54
                                       ? 49'h50
                                       : in_bits[127:120] == 8'hFD
                                           ? 49'h2A
                                           : in_bits[48:0],
     in_bits[51:0]};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/decode/NodeMap.scala:7:7, :20:12, :27:22, :29:{19,45}, :33:14, src/main/scala/chisel3/util/Mux.scala:126:16
endmodule

module NodeDiv_1(	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
  input          clock,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
  input  [127:0] in_bits,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:23:14
  output [127:0] out_bits	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:24:15
);

  reg  [127:0] in_reg;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:26:19
  reg  [127:0] out_reg;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:27:20
  wire [87:0]  _out_reg_T_2 = in_reg[127:40] / {87'h0, in_reg[0]};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:26:19, :49:{25,34,42}
  always @(posedge clock) begin	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    in_reg <= in_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:26:19
    out_reg <= {_out_reg_T_2[76:0], in_reg[50:0]};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:26:19, :27:20, :49:{11,34,75}
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    `ifdef FIRRTL_BEFORE_INITIAL	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
      `FIRRTL_BEFORE_INITIAL	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:7];	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    initial begin	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
      `ifdef INIT_RANDOM_PROLOG_	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
        `INIT_RANDOM_PROLOG_	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
        for (logic [3:0] i = 4'h0; i < 4'h8; i += 4'h1) begin
          _RANDOM[i[2:0]] = `RANDOM;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
        end	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
        in_reg = {_RANDOM[3'h0], _RANDOM[3'h1], _RANDOM[3'h2], _RANDOM[3'h3]};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7, :26:19
        out_reg = {_RANDOM[3'h4], _RANDOM[3'h5], _RANDOM[3'h6], _RANDOM[3'h7]};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7, :27:20
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
      `FIRRTL_AFTER_INITIAL	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign out_bits = out_reg;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/math/NodeDiv.scala:21:7, :27:20
endmodule

module NodeMux(	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/mux/NodeMux.scala:6:7
  input  [127:0] in_bits,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/mux/NodeMux.scala:8:14
  output [19:0]  out_bits	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/mux/NodeMux.scala:9:15
);

  wire [79:0] _out_bits_T_2 = in_bits[127:48] >> in_bits[47:0];	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/mux/NodeMux.scala:13:{27,37,47}
  assign out_bits = {_out_bits_T_2[9:0], in_bits[9:0]};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/mux/NodeMux.scala:6:7, :13:{12,37,68}
endmodule

module TestPipeline(	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:38:7
  input         clock,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:38:7
                reset,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:38:7
                in_valid,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:26:20
  output        in_ready,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:27:20
  input  [31:0] in_bits,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:28:19
  output        out_valid,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:29:21
  input         out_ready,	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:30:21
  output [31:0] out_bits	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:31:20
);

  wire [19:0]  _modules_7_out_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:38:13
  wire [127:0] _modules_6_out_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:65:13
  wire [127:0] _modules_5_out_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:74:13
  wire         _modules_4_in_ready;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
  wire [127:0] _modules_4_out_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
  wire         _modules_3_out_valid;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
  wire [127:0] _modules_3_out_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
  wire [127:0] _modules_2_out_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:65:13
  wire [127:0] _modules_1_out_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:47:13
  wire [31:0]  _modules_0_out_bits;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
  NodeQueue modules_0 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
    .clock    (clock),
    .reset    (reset),
    .in_ready (in_ready),
    .in_valid (in_valid),
    .in_bits  (in_bits),
    .out_bits (_modules_0_out_bits)
  );
  NodeDemux modules_1 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:47:13
    .in_bits  (_modules_0_out_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
    .out_bits (_modules_1_out_bits)
  );
  NodeDiv modules_2 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:65:13
    .clock    (clock),
    .in_bits  (_modules_1_out_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:47:13
    .out_bits (_modules_2_out_bits)
  );
  NodeQueue_1 modules_3 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
    .clock     (clock),
    .reset     (reset),
    .in_bits   (_modules_2_out_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:65:13
    .out_ready (_modules_4_in_ready),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
    .out_valid (_modules_3_out_valid),
    .out_bits  (_modules_3_out_bits)
  );
  NodeQueue_2 modules_4 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
    .clock    (clock),
    .reset    (reset),
    .in_ready (_modules_4_in_ready),
    .in_valid (_modules_3_out_valid),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
    .in_bits  (_modules_3_out_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
    .out_bits (_modules_4_out_bits)
  );
  NodeMap modules_5 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:74:13
    .in_bits  (_modules_4_out_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13
    .out_bits (_modules_5_out_bits)
  );
  NodeDiv_1 modules_6 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:65:13
    .clock    (clock),
    .in_bits  (_modules_5_out_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:74:13
    .out_bits (_modules_6_out_bits)
  );
  NodeMux modules_7 (	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:38:13
    .in_bits  (_modules_6_out_bits),	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:65:13
    .out_bits (_modules_7_out_bits)
  );
  assign out_valid = 1'h1;	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:29:13, :38:13, :47:13, :65:13, :74:13, home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:38:7, :45:17
  assign out_bits = {12'h0, _modules_7_out_bits};	// home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/NodeFabric.scala:38:13, :136:9, home/nikola/ChiliChips/openCologne/pnr_tests-novi/tests/pipeline/TestPipeline.scala:38:7
endmodule

